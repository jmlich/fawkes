$#include <interfaces/NavigatorInterface.h>
$#include <utils/time/time.h>
$#include <utils/time/clock.h>
$using namespace fawkes;
namespace fawkes {
class NavigatorInterface : public Interface
{
  static const unsigned int ERROR_NONE;
  static const unsigned int ERROR_MOTOR;
  static const unsigned int ERROR_OBSTRUCTION;
  static const unsigned int ERROR_UNKNOWN_PLACE;
  static const unsigned int FLAG_NONE;
  static const unsigned int FLAG_CART_GOTO;
  static const unsigned int FLAG_POLAR_GOTO;
  static const unsigned int FLAG_PLACE_GOTO;
  static const unsigned int FLAG_UPDATES_DEST_DIST;
  static const unsigned int FLAG_SECURITY_DISTANCE;
  static const unsigned int FLAG_ESCAPING;

  typedef enum {
    MovingNotAllowed,
    Forward,
    AllowBackward,
    Backward,
    ESCAPE
  } DriveMode;

  typedef enum {
    OrientAtTarget,
    OrientDuringTravel
  } OrientationMode;

  class StopMessage : public Message
  {
    StopMessage();
    ~StopMessage();

  };

  class TurnMessage : public Message
  {
    TurnMessage(float ini_angle, float ini_velocity);
    TurnMessage();
    ~TurnMessage();

    float angle();
    void set_angle(const float new_angle);
    int maxlenof_angle() const;
    float velocity();
    void set_velocity(const float new_velocity);
    int maxlenof_velocity() const;
  };

  class CartesianGotoMessage : public Message
  {
    CartesianGotoMessage(float ini_x, float ini_y, float ini_orientation);
    CartesianGotoMessage();
    ~CartesianGotoMessage();

    float x();
    void set_x(const float new_x);
    int maxlenof_x() const;
    float y();
    void set_y(const float new_y);
    int maxlenof_y() const;
    float orientation();
    void set_orientation(const float new_orientation);
    int maxlenof_orientation() const;
  };

  class PolarGotoMessage : public Message
  {
    PolarGotoMessage(float ini_phi, float ini_dist, float ini_orientation);
    PolarGotoMessage();
    ~PolarGotoMessage();

    float phi();
    void set_phi(const float new_phi);
    int maxlenof_phi() const;
    float dist();
    void set_dist(const float new_dist);
    int maxlenof_dist() const;
    float orientation();
    void set_orientation(const float new_orientation);
    int maxlenof_orientation() const;
  };

  class PlaceGotoMessage : public Message
  {
    PlaceGotoMessage(char * ini_place);
    PlaceGotoMessage();
    ~PlaceGotoMessage();

    char * place();
    void set_place(const char * new_place);
    int maxlenof_place() const;
  };

  class PlaceWithOriGotoMessage : public Message
  {
    PlaceWithOriGotoMessage(char * ini_place, float ini_orientation);
    PlaceWithOriGotoMessage();
    ~PlaceWithOriGotoMessage();

    char * place();
    void set_place(const char * new_place);
    int maxlenof_place() const;
    float orientation();
    void set_orientation(const float new_orientation);
    int maxlenof_orientation() const;
  };

  class ObstacleMessage : public Message
  {
    ObstacleMessage(float ini_x, float ini_y, float ini_width);
    ObstacleMessage();
    ~ObstacleMessage();

    float x();
    void set_x(const float new_x);
    int maxlenof_x() const;
    float y();
    void set_y(const float new_y);
    int maxlenof_y() const;
    float width();
    void set_width(const float new_width);
    int maxlenof_width() const;
  };

  class ResetOdometryMessage : public Message
  {
    ResetOdometryMessage();
    ~ResetOdometryMessage();

  };

  class SetMaxVelocityMessage : public Message
  {
    SetMaxVelocityMessage(float ini_max_velocity);
    SetMaxVelocityMessage();
    ~SetMaxVelocityMessage();

    float max_velocity();
    void set_max_velocity(const float new_max_velocity);
    int maxlenof_max_velocity() const;
  };

  class SetMaxRotationMessage : public Message
  {
    SetMaxRotationMessage(float ini_max_rotation);
    SetMaxRotationMessage();
    ~SetMaxRotationMessage();

    float max_rotation();
    void set_max_rotation(const float new_max_rotation);
    int maxlenof_max_rotation() const;
  };

  class SetEscapingMessage : public Message
  {
    SetEscapingMessage(bool ini_escaping_enabled);
    SetEscapingMessage();
    ~SetEscapingMessage();

    bool is_escaping_enabled();
    void set_escaping_enabled(const bool new_escaping_enabled);
    int maxlenof_escaping_enabled() const;
  };

  class SetSecurityDistanceMessage : public Message
  {
    SetSecurityDistanceMessage(float ini_security_distance);
    SetSecurityDistanceMessage();
    ~SetSecurityDistanceMessage();

    float security_distance();
    void set_security_distance(const float new_security_distance);
    int maxlenof_security_distance() const;
  };

  class SetDriveModeMessage : public Message
  {
    SetDriveModeMessage(DriveMode ini_drive_mode);
    SetDriveModeMessage();
    ~SetDriveModeMessage();

    DriveMode drive_mode();
    void set_drive_mode(const DriveMode new_drive_mode);
    int maxlenof_drive_mode() const;
  };

  class SetStopAtTargetMessage : public Message
  {
    SetStopAtTargetMessage(bool ini_stop_at_target);
    SetStopAtTargetMessage();
    ~SetStopAtTargetMessage();

    bool is_stop_at_target();
    void set_stop_at_target(const bool new_stop_at_target);
    int maxlenof_stop_at_target() const;
  };

  class SetOrientationModeMessage : public Message
  {
    SetOrientationModeMessage(OrientationMode ini_orientation_mode);
    SetOrientationModeMessage();
    ~SetOrientationModeMessage();

    OrientationMode orientation_mode();
    void set_orientation_mode(const OrientationMode new_orientation_mode);
    int maxlenof_orientation_mode() const;
  };

  class ResetParametersMessage : public Message
  {
    ResetParametersMessage();
    ~ResetParametersMessage();

  };

  unsigned int flags();
  void set_flags(const unsigned int new_flags);
  int maxlenof_flags() const;
  float x();
  void set_x(const float new_x);
  int maxlenof_x() const;
  float y();
  void set_y(const float new_y);
  int maxlenof_y() const;
  float dest_x();
  void set_dest_x(const float new_dest_x);
  int maxlenof_dest_x() const;
  float dest_y();
  void set_dest_y(const float new_dest_y);
  int maxlenof_dest_y() const;
  float dest_ori();
  void set_dest_ori(const float new_dest_ori);
  int maxlenof_dest_ori() const;
  float dest_dist();
  void set_dest_dist(const float new_dest_dist);
  int maxlenof_dest_dist() const;
  unsigned int msgid();
  void set_msgid(const unsigned int new_msgid);
  int maxlenof_msgid() const;
  bool is_final();
  void set_final(const bool new_final);
  int maxlenof_final() const;
  unsigned int error_code();
  void set_error_code(const unsigned int new_error_code);
  int maxlenof_error_code() const;
  float max_velocity();
  void set_max_velocity(const float new_max_velocity);
  int maxlenof_max_velocity() const;
  float max_rotation();
  void set_max_rotation(const float new_max_rotation);
  int maxlenof_max_rotation() const;
  float security_distance();
  void set_security_distance(const float new_security_distance);
  int maxlenof_security_distance() const;
  bool is_escaping_enabled();
  void set_escaping_enabled(const bool new_escaping_enabled);
  int maxlenof_escaping_enabled() const;
  DriveMode drive_mode();
  void set_drive_mode(const DriveMode new_drive_mode);
  int maxlenof_drive_mode() const;
  bool is_auto_drive_mode();
  void set_auto_drive_mode(const bool new_auto_drive_mode);
  int maxlenof_auto_drive_mode() const;
  bool is_stop_at_target();
  void set_stop_at_target(const bool new_stop_at_target);
  int maxlenof_stop_at_target() const;
  OrientationMode orientation_mode();
  void set_orientation_mode(const OrientationMode new_orientation_mode);
  int maxlenof_orientation_mode() const;
  bool                    oftype(const char *interface_type) const;
  const void *            datachunk() const;
  unsigned int            datasize() const;
  const char *            type() const;
  const char *            id() const;
  const char *            uid() const;
  unsigned int            serial() const;
  unsigned int            mem_serial() const;
  bool                    operator== (Interface &comp) const;
  const unsigned char *   hash() const;
  int                     hash_size() const;
  const char *            hash_printable() const;
  bool                    is_writer() const;
  void                    set_from_chunk(void *chunk);
  virtual Message *   create_message(const char *type) const = 0;
  void          read();
  void          write();
  bool          has_writer() const;
  unsigned int  num_readers() const;
  bool          changed() const;
  const fawkes::Time *  timestamp() const;
  void          set_auto_timestamping(bool enabled);
  void          set_timestamp(const fawkes::Time *t);
  void          set_clock(fawkes::Clock *clock);
  unsigned int  msgq_enqueue_copy(Message *message);
  void          msgq_remove(Message *message);
  void          msgq_remove(unsigned int message_id);
  unsigned int  msgq_size();
  void          msgq_flush();
  void          msgq_lock();
  bool          msgq_try_lock();
  void          msgq_unlock();
  void          msgq_pop();
  Message *     msgq_first();
  bool          msgq_empty();


};

}
