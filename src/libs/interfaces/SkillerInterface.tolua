$#include <interfaces/SkillerInterface.h>
$#include <utils/time/time.h>
$#include <utils/time/clock.h>
$using namespace fawkes;
namespace fawkes {
class SkillerInterface : public Interface
{

  typedef enum {
    S_INACTIVE,
    S_FINAL,
    S_RUNNING,
    S_FAILED
  } SkillStatusEnum;

  class ExecSkillMessage : public Message
  {
    ExecSkillMessage(char * ini_skill_string);
    ExecSkillMessage();
    ~ExecSkillMessage();

    char * skill_string();
    void set_skill_string(const char * new_skill_string);
    int maxlenof_skill_string() const;
  };

  class RestartInterpreterMessage : public Message
  {
    RestartInterpreterMessage();
    ~RestartInterpreterMessage();

  };

  class StopExecMessage : public Message
  {
    StopExecMessage();
    ~StopExecMessage();

  };

  class AcquireControlMessage : public Message
  {
    AcquireControlMessage(bool ini_steal_control);
    AcquireControlMessage();
    ~AcquireControlMessage();

    bool is_steal_control();
    void set_steal_control(const bool new_steal_control);
    int maxlenof_steal_control() const;
  };

  class ReleaseControlMessage : public Message
  {
    ReleaseControlMessage();
    ~ReleaseControlMessage();

  };

  char * skill_string();
  void set_skill_string(const char * new_skill_string);
  int maxlenof_skill_string() const;
  char * error();
  void set_error(const char * new_error);
  int maxlenof_error() const;
  unsigned int exclusive_controller();
  void set_exclusive_controller(const unsigned int new_exclusive_controller);
  int maxlenof_exclusive_controller() const;
  unsigned int msgid();
  void set_msgid(const unsigned int new_msgid);
  int maxlenof_msgid() const;
  SkillStatusEnum status();
  void set_status(const SkillStatusEnum new_status);
  int maxlenof_status() const;
  bool                    oftype(const char *interface_type) const;
  const void *            datachunk() const;
  unsigned int            datasize() const;
  const char *            type() const;
  const char *            id() const;
  const char *            uid() const;
  unsigned int            serial() const;
  unsigned int            mem_serial() const;
  bool                    operator== (Interface &comp) const;
  const unsigned char *   hash() const;
  int                     hash_size() const;
  const char *            hash_printable() const;
  bool                    is_writer() const;
  void                    set_from_chunk(void *chunk);
  virtual Message *   create_message(const char *type) const = 0;
  void          read();
  void          write();
  bool          has_writer() const;
  unsigned int  num_readers() const;
  bool          changed() const;
  const fawkes::Time *  timestamp() const;
  void          set_auto_timestamping(bool enabled);
  void          set_timestamp(const fawkes::Time *t);
  void          set_clock(fawkes::Clock *clock);
  unsigned int  msgq_enqueue_copy(Message *message);
  void          msgq_remove(Message *message);
  void          msgq_remove(unsigned int message_id);
  unsigned int  msgq_size();
  void          msgq_flush();
  void          msgq_lock();
  bool          msgq_try_lock();
  void          msgq_unlock();
  void          msgq_pop();
  Message *     msgq_first();
  bool          msgq_empty();


};

}
