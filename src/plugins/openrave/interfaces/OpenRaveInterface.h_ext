
/***************************************************************************
 *  OpenRaveInterface.h - Fawkes BlackBoard Interface - OpenRaveInterface
 *
 *  Templated created:   Thu Oct 12 10:49:19 2006
 *  Copyright  2011  Bahram Maleki-Fard
 *
 ****************************************************************************/

/*  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2 of the License, or
 *  (at your option) any later version. A runtime exception applies to
 *  this software (see LICENSE.GPL_WRE file mentioned below for details).
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Library General Public License for more details.
 *
 *  Read the full text in the LICENSE.GPL_WRE file in the doc directory.
 */

#ifndef __INTERFACES_OPENRAVEINTERFACE_H_
#define __INTERFACES_OPENRAVEINTERFACE_H_

#include <interface/interface.h>
#include <interface/message.h>
#include <interface/field_iterator.h>

namespace fawkes {

class OpenRaveInterface : public Interface
{
 /// @cond INTERNALS
 INTERFACE_MGMT_FRIENDS(OpenRaveInterface)
 /// @endcond
 public:
  /* constants */

 private:
#pragma pack(push,4)
  /** Internal data storage, do NOT modify! */
  typedef struct {
    int64_t timestamp_sec;  /**< Interface Unix timestamp, seconds */
    int64_t timestamp_usec; /**< Interface Unix timestamp, micro-seconds */
    uint32_t msgid; /**< The ID of the message that is currently being
      processed, or 0 if no message is being processed. */
    bool final; /**< True, if the last goto command has been finished,
      false if it is still running */
    uint32_t error_code; /**< Failure code set if
      final is true. 0 if no error occured, an error code from ERROR_*
      constants otherwise (or a bit-wise combination). */
    bool success; /**< True, if last command was successful. False otherwise */
  } OpenRaveInterface_data_t;
#pragma pack(pop)

  OpenRaveInterface_data_t *data;

 public:
  /* messages */
  class StartViewerMessage : public Message
  {
   private:
#pragma pack(push,4)
    /** Internal data storage, do NOT modify! */
    typedef struct {
      int64_t timestamp_sec;  /**< Interface Unix timestamp, seconds */
      int64_t timestamp_usec; /**< Interface Unix timestamp, micro-seconds */
    } StartViewerMessage_data_t;
#pragma pack(pop)

    StartViewerMessage_data_t *data;

   public:
    StartViewerMessage();
    ~StartViewerMessage();

    StartViewerMessage(const StartViewerMessage *m);
    /* Methods */
    virtual Message * clone() const;
  };

  class AddObjectMessage : public Message
  {
   private:
#pragma pack(push,4)
    /** Internal data storage, do NOT modify! */
    typedef struct {
      int64_t timestamp_sec;  /**< Interface Unix timestamp, seconds */
      int64_t timestamp_usec; /**< Interface Unix timestamp, micro-seconds */
      char name[30]; /**< Name of object */
      char path[1024]; /**< Path to object xml file */
    } AddObjectMessage_data_t;
#pragma pack(pop)

    AddObjectMessage_data_t *data;

   public:
    AddObjectMessage(const char * ini_name, const char * ini_path);
    AddObjectMessage();
    ~AddObjectMessage();

    AddObjectMessage(const AddObjectMessage *m);
    /* Methods */
    char * name() const;
    void set_name(const char * new_name);
    size_t maxlenof_name() const;
    char * path() const;
    void set_path(const char * new_path);
    size_t maxlenof_path() const;
    virtual Message * clone() const;
  };

  class DeleteObjectMessage : public Message
  {
   private:
#pragma pack(push,4)
    /** Internal data storage, do NOT modify! */
    typedef struct {
      int64_t timestamp_sec;  /**< Interface Unix timestamp, seconds */
      int64_t timestamp_usec; /**< Interface Unix timestamp, micro-seconds */
      char name[30]; /**< Name of object */
    } DeleteObjectMessage_data_t;
#pragma pack(pop)

    DeleteObjectMessage_data_t *data;

   public:
    DeleteObjectMessage(const char * ini_name);
    DeleteObjectMessage();
    ~DeleteObjectMessage();

    DeleteObjectMessage(const DeleteObjectMessage *m);
    /* Methods */
    char * name() const;
    void set_name(const char * new_name);
    size_t maxlenof_name() const;
    virtual Message * clone() const;
  };

  class AttachObjectMessage : public Message
  {
   private:
#pragma pack(push,4)
    /** Internal data storage, do NOT modify! */
    typedef struct {
      int64_t timestamp_sec;  /**< Interface Unix timestamp, seconds */
      int64_t timestamp_usec; /**< Interface Unix timestamp, micro-seconds */
      char name[30]; /**< Name of object */
    } AttachObjectMessage_data_t;
#pragma pack(pop)

    AttachObjectMessage_data_t *data;

   public:
    AttachObjectMessage(const char * ini_name);
    AttachObjectMessage();
    ~AttachObjectMessage();

    AttachObjectMessage(const AttachObjectMessage *m);
    /* Methods */
    char * name() const;
    void set_name(const char * new_name);
    size_t maxlenof_name() const;
    virtual Message * clone() const;
  };

  class ReleaseObjectMessage : public Message
  {
   private:
#pragma pack(push,4)
    /** Internal data storage, do NOT modify! */
    typedef struct {
      int64_t timestamp_sec;  /**< Interface Unix timestamp, seconds */
      int64_t timestamp_usec; /**< Interface Unix timestamp, micro-seconds */
      char name[30]; /**< Name of object */
    } ReleaseObjectMessage_data_t;
#pragma pack(pop)

    ReleaseObjectMessage_data_t *data;

   public:
    ReleaseObjectMessage(const char * ini_name);
    ReleaseObjectMessage();
    ~ReleaseObjectMessage();

    ReleaseObjectMessage(const ReleaseObjectMessage *m);
    /* Methods */
    char * name() const;
    void set_name(const char * new_name);
    size_t maxlenof_name() const;
    virtual Message * clone() const;
  };

  class ReleaseAllObjectsMessage : public Message
  {
   private:
#pragma pack(push,4)
    /** Internal data storage, do NOT modify! */
    typedef struct {
      int64_t timestamp_sec;  /**< Interface Unix timestamp, seconds */
      int64_t timestamp_usec; /**< Interface Unix timestamp, micro-seconds */
    } ReleaseAllObjectsMessage_data_t;
#pragma pack(pop)

    ReleaseAllObjectsMessage_data_t *data;

   public:
    ReleaseAllObjectsMessage();
    ~ReleaseAllObjectsMessage();

    ReleaseAllObjectsMessage(const ReleaseAllObjectsMessage *m);
    /* Methods */
    virtual Message * clone() const;
  };

  class MoveObjectMessage : public Message
  {
   private:
#pragma pack(push,4)
    /** Internal data storage, do NOT modify! */
    typedef struct {
      int64_t timestamp_sec;  /**< Interface Unix timestamp, seconds */
      int64_t timestamp_usec; /**< Interface Unix timestamp, micro-seconds */
      char name[30]; /**< Name of object */
      float x; /**< x position of object (meters) */
      float y; /**< y position of object (meters) */
      float z; /**< z position of object (meters) */
    } MoveObjectMessage_data_t;
#pragma pack(pop)

    MoveObjectMessage_data_t *data;

   public:
    MoveObjectMessage(const char * ini_name, const float ini_x, const float ini_y, const float ini_z);
    MoveObjectMessage();
    ~MoveObjectMessage();

    MoveObjectMessage(const MoveObjectMessage *m);
    /* Methods */
    char * name() const;
    void set_name(const char * new_name);
    size_t maxlenof_name() const;
    float x() const;
    void set_x(const float new_x);
    size_t maxlenof_x() const;
    float y() const;
    void set_y(const float new_y);
    size_t maxlenof_y() const;
    float z() const;
    void set_z(const float new_z);
    size_t maxlenof_z() const;
    virtual Message * clone() const;
  };

  class RotateObjectQuatMessage : public Message
  {
   private:
#pragma pack(push,4)
    /** Internal data storage, do NOT modify! */
    typedef struct {
      int64_t timestamp_sec;  /**< Interface Unix timestamp, seconds */
      int64_t timestamp_usec; /**< Interface Unix timestamp, micro-seconds */
      char name[30]; /**< Name of object */
      float x; /**< x value of quaternion */
      float y; /**< y value of quaternion */
      float z; /**< z value of quaternion */
      float w; /**< w value of quaternion */
    } RotateObjectQuatMessage_data_t;
#pragma pack(pop)

    RotateObjectQuatMessage_data_t *data;

   public:
    RotateObjectQuatMessage(const char * ini_name, const float ini_x, const float ini_y, const float ini_z, const float ini_w);
    RotateObjectQuatMessage();
    ~RotateObjectQuatMessage();

    RotateObjectQuatMessage(const RotateObjectQuatMessage *m);
    /* Methods */
    char * name() const;
    void set_name(const char * new_name);
    size_t maxlenof_name() const;
    float x() const;
    void set_x(const float new_x);
    size_t maxlenof_x() const;
    float y() const;
    void set_y(const float new_y);
    size_t maxlenof_y() const;
    float z() const;
    void set_z(const float new_z);
    size_t maxlenof_z() const;
    float w() const;
    void set_w(const float new_w);
    size_t maxlenof_w() const;
    virtual Message * clone() const;
  };

  class RotateObjectMessage : public Message
  {
   private:
#pragma pack(push,4)
    /** Internal data storage, do NOT modify! */
    typedef struct {
      int64_t timestamp_sec;  /**< Interface Unix timestamp, seconds */
      int64_t timestamp_usec; /**< Interface Unix timestamp, micro-seconds */
      char name[30]; /**< Name of object */
      float x; /**< x-axis rotation of object (rad) */
      float y; /**< y-axis rotation of object (rad) */
      float z; /**< z-axis rotation of object (rad) */
    } RotateObjectMessage_data_t;
#pragma pack(pop)

    RotateObjectMessage_data_t *data;

   public:
    RotateObjectMessage(const char * ini_name, const float ini_x, const float ini_y, const float ini_z);
    RotateObjectMessage();
    ~RotateObjectMessage();

    RotateObjectMessage(const RotateObjectMessage *m);
    /* Methods */
    char * name() const;
    void set_name(const char * new_name);
    size_t maxlenof_name() const;
    float x() const;
    void set_x(const float new_x);
    size_t maxlenof_x() const;
    float y() const;
    void set_y(const float new_y);
    size_t maxlenof_y() const;
    float z() const;
    void set_z(const float new_z);
    size_t maxlenof_z() const;
    virtual Message * clone() const;
  };

  class RenameObjectMessage : public Message
  {
   private:
#pragma pack(push,4)
    /** Internal data storage, do NOT modify! */
    typedef struct {
      int64_t timestamp_sec;  /**< Interface Unix timestamp, seconds */
      int64_t timestamp_usec; /**< Interface Unix timestamp, micro-seconds */
      char name[30]; /**< Name of object */
      char newName[30]; /**< New name of object */
    } RenameObjectMessage_data_t;
#pragma pack(pop)

    RenameObjectMessage_data_t *data;

   public:
    RenameObjectMessage(const char * ini_name, const char * ini_newName);
    RenameObjectMessage();
    ~RenameObjectMessage();

    RenameObjectMessage(const RenameObjectMessage *m);
    /* Methods */
    char * name() const;
    void set_name(const char * new_name);
    size_t maxlenof_name() const;
    char * newName() const;
    void set_newName(const char * new_newName);
    size_t maxlenof_newName() const;
    virtual Message * clone() const;
  };

  virtual bool message_valid(const Message *message) const;
 private:
  OpenRaveInterface();
  ~OpenRaveInterface();

 public:
  /* Methods */
  uint32_t msgid() const;
  void set_msgid(const uint32_t new_msgid);
  size_t maxlenof_msgid() const;
  bool is_final() const;
  void set_final(const bool new_final);
  size_t maxlenof_final() const;
  uint32_t error_code() const;
  void set_error_code(const uint32_t new_error_code);
  size_t maxlenof_error_code() const;
  bool is_success() const;
  void set_success(const bool new_success);
  size_t maxlenof_success() const;
  virtual Message * create_message(const char *type) const;

  virtual void copy_values(const Interface *other);
  virtual const char * enum_tostring(const char *enumtype, int val) const;

};

} // end namespace fawkes

#endif
