
/***************************************************************************
 *  Roomba500Interface.h - Fawkes BlackBoard Interface - Roomba500Interface
 *
 *  Templated created:   Thu Oct 12 10:49:19 2006
 *  Copyright  2011  Tim Niemueller
 *
 ****************************************************************************/

/*  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2 of the License, or
 *  (at your option) any later version. A runtime exception applies to
 *  this software (see LICENSE.GPL_WRE file mentioned below for details).
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Library General Public License for more details.
 *
 *  Read the full text in the LICENSE.GPL_WRE file in the doc directory.
 */

#ifndef __INTERFACES_ROOMBA500INTERFACE_H_
#define __INTERFACES_ROOMBA500INTERFACE_H_

#include <interface/interface.h>
#include <interface/message.h>
#include <interface/field_iterator.h>

namespace fawkes {

class Roomba500Interface : public Interface
{
 /// @cond INTERNALS
 INTERFACE_MGMT_FRIENDS(Roomba500Interface)
 /// @endcond
 public:
  /* constants */

  /** Open Interface mode. */
  typedef enum {
    MODE_OFF = 0 /**< No connection. */,
    MODE_PASSIVE = 1 /**< Passive mode, no control,
        only listening. */,
    MODE_SAFE = 2 /**< Control acquired, safety measures
        in place. */,
    MODE_FULL = 3 /**< Control acquired, safety measures
        disabled. */
  } Mode;
  const char * tostring_Mode(Mode value) const;

  /** Infrared character values. */
  typedef enum {
    IR_NONE = 0 /**< No valid IR signal */,
    IR_REMOTE_LEFT = 129 /**< IR Remote Control: left button */,
    IR_REMOTE_FORWARD = 130 /**<  IR Remote Control: forward
        button */,
    IR_REMOTE_RIGHT = 131 /**< IR Remote Control: right
        button */,
    IR_REMOTE_SPOT = 132 /**< IR Remote Control: spot button */,
    IR_REMOTE_MAX = 133 /**< IR Remote Control: max button */,
    IR_REMOTE_SMALL = 134 /**< IR Remote Control: small
        button */,
    IR_REMOTE_MEDIUM = 135 /**< IR Remote Control:
        medium button */,
    IR_REMOTE_LARGE_CLEAN = 136 /**< IR Remote Control:
        large/clean button */,
    IR_REMOTE_STOP = 137 /**< IR Remote Control: stop button */,
    IR_REMOTE_POWER = 138 /**< IR Remote Control:
        power button */,
    IR_REMOTE_ARC_LEFT = 139 /**< IR Remote Control:
        left arc button */,
    IR_REMOTE_ARC_RIGHT = 140 /**< IR Remote Control:
        right arc button */,
    IR_REMOTE_STOP2 = 141 /**< IR Remote Control:
        stop button */,
    IR_SCHED_REMOTE_DOWNLOAD = 142 /**< IR scheduling remote:
        download button */,
    IR_SCHED_REMOTE_SEEK_DOCK = 143 /**< IR scheduling remote:
        seek dock button */,
    IR_DISC_DOCK_RESERVED = 240 /**< Roomba Discovery dock:
        reserved */,
    IR_DISC_DOCK_RED_BUOY = 248 /**< Roomba Discovery dock:
        red buoy */,
    IR_DISC_DOCK_GREEN_BUOY = 244 /**< Roomba Discovery dock:
        green buoy */,
    IR_DISC_DOCK_FORCE_FIELD = 242 /**< Roomba Discovery dock:
        red and green buoy */,
    IR_DISC_DOCK_RED_GREEN_BUOY = 252 /**< Roomba Discovery dock:
        red buoy and force field */,
    IR_DISC_DOCK_RED_BUOY_FORCE_FIELD = 250 /**< Roomba Discovery
        dock: green buoy and force field */,
    IR_DISC_DOCK_GREEN_BUOY_FORCE_FIELD = 246 /**< Roomba
        Discovery dock: green buoy and force field. */,
    IR_DISC_DOCK_RED_GREEN_BUOY_FORCE_FIELD = 254 /**< Roomba
        Discovery dock: red and green buoy and force field */,
    IR_DOCK_RESERVED = 160 /**< Roomba 500 dock: reserved */,
    IR_DOCK_RED_BUOY = 168 /**< Roomba 500 dock: red buoy */,
    IR_DOCK_GREEN_BUOY = 164 /**< Roomba 500 dock: green buoy */,
    IR_DOCK_FORCE_FIELD = 161 /**< Roomba 500 dock: red and green buoy */,
    IR_DOCK_RED_GREEN_BUOY = 172 /**< Roomba 500 dock: red buoy and force field */,
    IR_DOCK_RED_BUOY_FORCE_FIELD = 169 /**< Roomba 500 dock: green buoy and force field. */,
    IR_DOCK_GREEN_BUOY_FORCE_FIELD = 165 /**< Roomba 500 dock: green buoy and force field. */,
    IR_DOCK_RED_GREEN_BUOY_FORCE_FIELD = 173 /**< Roomba 500 dock: red and green buoy and force field. */,
    IR_VIRTUAL_WALL = 162 /**< IR Virtual Wall */
  } InfraredCharacter;
  const char * tostring_InfraredCharacter(InfraredCharacter value) const;

  /** 
	Current charging state.
       */
  typedef enum {
    CHARGING_NO = 0 /**< Not charging. */,
    CHARGING_RECONDITIONING = 1 /**< Reconditioning battery. */,
    CHARGING_FULL = 2 /**< Full charging cycle. */,
    CHARGING_TRICKLE = 3 /**< Trickle charging. */,
    CHARGING_WAITING = 4 /**< Waiting. */,
    CHARGING_ERROR = 5 /**< Fault condition. */
  } ChargingState;
  const char * tostring_ChargingState(ChargingState value) const;

  /** State of the brushes. */
  typedef enum {
    BRUSHSTATE_OFF /**< Brush is off. */,
    BRUSHSTATE_FORWARD /**< Brush is turning forward. */,
    BRUSHSTATE_BACKWARD /**< Brush is turning backward. */
  } BrushState;
  const char * tostring_BrushState(BrushState value) const;

 private:
#pragma pack(push,4)
  /** Internal data storage, do NOT modify! */
  typedef struct {
    int64_t timestamp_sec;  /**< Interface Unix timestamp, seconds */
    int64_t timestamp_usec; /**< Interface Unix timestamp, micro-seconds */
    int32_t mode; /**< Open Interface mode. */
    bool wheel_drop_left; /**< Left wheel drop sensor. */
    bool wheel_drop_right; /**< Right wheel drop sensor. */
    bool bump_left; /**< Bump on left. */
    bool bump_right; /**< Bump on right. */
    bool wall; /**< Wall sensor. */
    bool cliff_left; /**< Cliff detected left. */
    bool cliff_front_left; /**< Cliff detected front left. */
    bool cliff_front_right; /**< Cliff detected front right. */
    bool cliff_right; /**< Cliff detected right. */
    bool virtual_wall; /**< Virtual wall detected. */
    bool overcurrent_side_brush; /**< Overcurrent on side brush. */
    bool overcurrent_main_brush; /**< Overcurrent on main brush. */
    bool overcurrent_left_wheel; /**< Overcurrent on left wheel. */
    bool overcurrent_right_wheel; /**< Overcurrent on right wheel. */
    bool dirt_detect; /**< Dirt detected? */
    int32_t ir_opcode_omni; /**< Omni IR receiver code. */
    bool button_clean; /**< Clean button pressed. */
    bool button_spot; /**< Spot button pressed. */
    bool button_dock; /**< Dock button pressed. */
    bool button_minute; /**< Minute button pressed. */
    bool button_hour; /**< Hour button pressed. */
    bool button_day; /**< Day button pressed. */
    bool button_schedule; /**< Schedule button pressed. */
    bool button_clock; /**< Clock button pressed. */
    int16_t distance; /**< Travelled distance in m. */
    int16_t angle; /**< Turned angle in radians. */
    int32_t charging_state; /**< Charging state. */
    uint16_t voltage; /**< Voltage in mV. */
    int16_t current; /**< Current in mA. */
    int8_t temperature; /**< Temperature in degree Celsius. */
    uint16_t battery_charge; /**< Battery charge in mAh. */
    uint16_t battery_capacity; /**< Battery capacity in mAh. */
    uint16_t wall_signal; /**< Raw wall signal */
    uint16_t cliff_left_signal; /**< Raw left cliff signal. */
    uint16_t cliff_front_left_signal; /**< Raw front left
      cliff signal. */
    uint16_t cliff_front_right_signal; /**< Raw front right
      cliff signal. */
    uint16_t cliff_right_signal; /**< Raw right cliff signal. */
    bool home_base_charger_available; /**< 
      Home base charger available? */
    bool internal_charger_available; /**< 
      Internal charger available? */
    uint8_t song_number; /**< Song number. */
    bool song_playing; /**< Song playing? */
    int16_t velocity; /**< Requested velocity in mm/s. */
    int16_t radius; /**< Requested radius in mm. */
    int16_t velocity_right; /**< Requested left velocity in mm/s. */
    int16_t velocity_left; /**< Requested right velocity in mm/s. */
    uint16_t encoder_counts_left; /**< Encoder count left. */
    uint16_t encoder_counts_right; /**< Encoder count right. */
    bool bumper_left; /**< Left bumper active? */
    bool bumper_front_left; /**< Front left bumper active? */
    bool bumper_center_left; /**< Center left bumper active? */
    bool bumper_center_right; /**< Center right bumper active? */
    bool bumper_front_right; /**< Front right bumper active? */
    bool bumper_right; /**< Right bumper active? */
    uint16_t light_bump_left; /**< Raw left bumper signal. */
    uint16_t light_bump_front_left; /**< Raw front left bumper
      signal. */
    uint16_t light_bump_center_left; /**< Raw center left
      bumper signal. */
    uint16_t light_bump_center_right; /**< Raw center right
      bumper signal. */
    uint16_t light_bump_front_right; /**< Raw front right
      bumper signal. */
    uint16_t light_bump_right; /**< Raw right bumper signal. */
    int32_t ir_opcode_left; /**< 
      Left receiver opcode. */
    int32_t ir_opcode_right; /**< 
      Right receiver opcode. */
    int16_t left_motor_current; /**< Left motor current in mA. */
    int16_t right_motor_current; /**< Right motor current in mA. */
    int16_t main_brush_current; /**< Main brush current in mA. */
    int16_t side_brush_current; /**< Side brush current in mA. */
    bool caster_stasis; /**< Caster wheel stasis. */
  } Roomba500Interface_data_t;
#pragma pack(pop)

  Roomba500Interface_data_t *data;

  interface_enum_map_t enum_map_Mode;
  interface_enum_map_t enum_map_InfraredCharacter;
  interface_enum_map_t enum_map_ChargingState;
  interface_enum_map_t enum_map_BrushState;
 public:
  /* messages */
  class StopMessage : public Message
  {
   private:
#pragma pack(push,4)
    /** Internal data storage, do NOT modify! */
    typedef struct {
      int64_t timestamp_sec;  /**< Interface Unix timestamp, seconds */
      int64_t timestamp_usec; /**< Interface Unix timestamp, micro-seconds */
    } StopMessage_data_t;
#pragma pack(pop)

    StopMessage_data_t *data;

  interface_enum_map_t enum_map_Mode;
  interface_enum_map_t enum_map_InfraredCharacter;
  interface_enum_map_t enum_map_ChargingState;
  interface_enum_map_t enum_map_BrushState;
   public:
    StopMessage();
    ~StopMessage();

    StopMessage(const StopMessage *m);
    /* Methods */
    virtual Message * clone() const;
  };

  class DockMessage : public Message
  {
   private:
#pragma pack(push,4)
    /** Internal data storage, do NOT modify! */
    typedef struct {
      int64_t timestamp_sec;  /**< Interface Unix timestamp, seconds */
      int64_t timestamp_usec; /**< Interface Unix timestamp, micro-seconds */
    } DockMessage_data_t;
#pragma pack(pop)

    DockMessage_data_t *data;

  interface_enum_map_t enum_map_Mode;
  interface_enum_map_t enum_map_InfraredCharacter;
  interface_enum_map_t enum_map_ChargingState;
  interface_enum_map_t enum_map_BrushState;
   public:
    DockMessage();
    ~DockMessage();

    DockMessage(const DockMessage *m);
    /* Methods */
    virtual Message * clone() const;
  };

  class SetModeMessage : public Message
  {
   private:
#pragma pack(push,4)
    /** Internal data storage, do NOT modify! */
    typedef struct {
      int64_t timestamp_sec;  /**< Interface Unix timestamp, seconds */
      int64_t timestamp_usec; /**< Interface Unix timestamp, micro-seconds */
      int32_t mode; /**< Open Interface mode. */
    } SetModeMessage_data_t;
#pragma pack(pop)

    SetModeMessage_data_t *data;

  interface_enum_map_t enum_map_Mode;
  interface_enum_map_t enum_map_InfraredCharacter;
  interface_enum_map_t enum_map_ChargingState;
  interface_enum_map_t enum_map_BrushState;
   public:
    SetModeMessage(const Mode ini_mode);
    SetModeMessage();
    ~SetModeMessage();

    SetModeMessage(const SetModeMessage *m);
    /* Methods */
    Mode mode() const;
    void set_mode(const Mode new_mode);
    size_t maxlenof_mode() const;
    virtual Message * clone() const;
  };

  class DriveStraightMessage : public Message
  {
   private:
#pragma pack(push,4)
    /** Internal data storage, do NOT modify! */
    typedef struct {
      int64_t timestamp_sec;  /**< Interface Unix timestamp, seconds */
      int64_t timestamp_usec; /**< Interface Unix timestamp, micro-seconds */
      int16_t velocity; /**< Requested velocity in mm/s. */
    } DriveStraightMessage_data_t;
#pragma pack(pop)

    DriveStraightMessage_data_t *data;

  interface_enum_map_t enum_map_Mode;
  interface_enum_map_t enum_map_InfraredCharacter;
  interface_enum_map_t enum_map_ChargingState;
  interface_enum_map_t enum_map_BrushState;
   public:
    DriveStraightMessage(const int16_t ini_velocity);
    DriveStraightMessage();
    ~DriveStraightMessage();

    DriveStraightMessage(const DriveStraightMessage *m);
    /* Methods */
    int16_t velocity() const;
    void set_velocity(const int16_t new_velocity);
    size_t maxlenof_velocity() const;
    virtual Message * clone() const;
  };

  class DriveMessage : public Message
  {
   private:
#pragma pack(push,4)
    /** Internal data storage, do NOT modify! */
    typedef struct {
      int64_t timestamp_sec;  /**< Interface Unix timestamp, seconds */
      int64_t timestamp_usec; /**< Interface Unix timestamp, micro-seconds */
      int16_t velocity; /**< Requested velocity in mm/s. */
      int16_t radius; /**< Requested radius in mm. */
    } DriveMessage_data_t;
#pragma pack(pop)

    DriveMessage_data_t *data;

  interface_enum_map_t enum_map_Mode;
  interface_enum_map_t enum_map_InfraredCharacter;
  interface_enum_map_t enum_map_ChargingState;
  interface_enum_map_t enum_map_BrushState;
   public:
    DriveMessage(const int16_t ini_velocity, const int16_t ini_radius);
    DriveMessage();
    ~DriveMessage();

    DriveMessage(const DriveMessage *m);
    /* Methods */
    int16_t velocity() const;
    void set_velocity(const int16_t new_velocity);
    size_t maxlenof_velocity() const;
    int16_t radius() const;
    void set_radius(const int16_t new_radius);
    size_t maxlenof_radius() const;
    virtual Message * clone() const;
  };

  class SetMotorsMessage : public Message
  {
   private:
#pragma pack(push,4)
    /** Internal data storage, do NOT modify! */
    typedef struct {
      int64_t timestamp_sec;  /**< Interface Unix timestamp, seconds */
      int64_t timestamp_usec; /**< Interface Unix timestamp, micro-seconds */
      bool vacuuming; /**< Enable vacuuming? */
      int32_t main; /**< Main brush state. */
      int32_t side; /**< Side brush state. */
    } SetMotorsMessage_data_t;
#pragma pack(pop)

    SetMotorsMessage_data_t *data;

  interface_enum_map_t enum_map_Mode;
  interface_enum_map_t enum_map_InfraredCharacter;
  interface_enum_map_t enum_map_ChargingState;
  interface_enum_map_t enum_map_BrushState;
   public:
    SetMotorsMessage(const bool ini_vacuuming, const BrushState ini_main, const BrushState ini_side);
    SetMotorsMessage();
    ~SetMotorsMessage();

    SetMotorsMessage(const SetMotorsMessage *m);
    /* Methods */
    bool is_vacuuming() const;
    void set_vacuuming(const bool new_vacuuming);
    size_t maxlenof_vacuuming() const;
    BrushState main() const;
    void set_main(const BrushState new_main);
    size_t maxlenof_main() const;
    BrushState side() const;
    void set_side(const BrushState new_side);
    size_t maxlenof_side() const;
    virtual Message * clone() const;
  };

  virtual bool message_valid(const Message *message) const;
 private:
  Roomba500Interface();
  ~Roomba500Interface();

 public:
  /* Methods */
  Mode mode() const;
  void set_mode(const Mode new_mode);
  size_t maxlenof_mode() const;
  bool is_wheel_drop_left() const;
  void set_wheel_drop_left(const bool new_wheel_drop_left);
  size_t maxlenof_wheel_drop_left() const;
  bool is_wheel_drop_right() const;
  void set_wheel_drop_right(const bool new_wheel_drop_right);
  size_t maxlenof_wheel_drop_right() const;
  bool is_bump_left() const;
  void set_bump_left(const bool new_bump_left);
  size_t maxlenof_bump_left() const;
  bool is_bump_right() const;
  void set_bump_right(const bool new_bump_right);
  size_t maxlenof_bump_right() const;
  bool is_wall() const;
  void set_wall(const bool new_wall);
  size_t maxlenof_wall() const;
  bool is_cliff_left() const;
  void set_cliff_left(const bool new_cliff_left);
  size_t maxlenof_cliff_left() const;
  bool is_cliff_front_left() const;
  void set_cliff_front_left(const bool new_cliff_front_left);
  size_t maxlenof_cliff_front_left() const;
  bool is_cliff_front_right() const;
  void set_cliff_front_right(const bool new_cliff_front_right);
  size_t maxlenof_cliff_front_right() const;
  bool is_cliff_right() const;
  void set_cliff_right(const bool new_cliff_right);
  size_t maxlenof_cliff_right() const;
  bool is_virtual_wall() const;
  void set_virtual_wall(const bool new_virtual_wall);
  size_t maxlenof_virtual_wall() const;
  bool is_overcurrent_side_brush() const;
  void set_overcurrent_side_brush(const bool new_overcurrent_side_brush);
  size_t maxlenof_overcurrent_side_brush() const;
  bool is_overcurrent_main_brush() const;
  void set_overcurrent_main_brush(const bool new_overcurrent_main_brush);
  size_t maxlenof_overcurrent_main_brush() const;
  bool is_overcurrent_left_wheel() const;
  void set_overcurrent_left_wheel(const bool new_overcurrent_left_wheel);
  size_t maxlenof_overcurrent_left_wheel() const;
  bool is_overcurrent_right_wheel() const;
  void set_overcurrent_right_wheel(const bool new_overcurrent_right_wheel);
  size_t maxlenof_overcurrent_right_wheel() const;
  bool is_dirt_detect() const;
  void set_dirt_detect(const bool new_dirt_detect);
  size_t maxlenof_dirt_detect() const;
  InfraredCharacter ir_opcode_omni() const;
  void set_ir_opcode_omni(const InfraredCharacter new_ir_opcode_omni);
  size_t maxlenof_ir_opcode_omni() const;
  bool is_button_clean() const;
  void set_button_clean(const bool new_button_clean);
  size_t maxlenof_button_clean() const;
  bool is_button_spot() const;
  void set_button_spot(const bool new_button_spot);
  size_t maxlenof_button_spot() const;
  bool is_button_dock() const;
  void set_button_dock(const bool new_button_dock);
  size_t maxlenof_button_dock() const;
  bool is_button_minute() const;
  void set_button_minute(const bool new_button_minute);
  size_t maxlenof_button_minute() const;
  bool is_button_hour() const;
  void set_button_hour(const bool new_button_hour);
  size_t maxlenof_button_hour() const;
  bool is_button_day() const;
  void set_button_day(const bool new_button_day);
  size_t maxlenof_button_day() const;
  bool is_button_schedule() const;
  void set_button_schedule(const bool new_button_schedule);
  size_t maxlenof_button_schedule() const;
  bool is_button_clock() const;
  void set_button_clock(const bool new_button_clock);
  size_t maxlenof_button_clock() const;
  int16_t distance() const;
  void set_distance(const int16_t new_distance);
  size_t maxlenof_distance() const;
  int16_t angle() const;
  void set_angle(const int16_t new_angle);
  size_t maxlenof_angle() const;
  ChargingState charging_state() const;
  void set_charging_state(const ChargingState new_charging_state);
  size_t maxlenof_charging_state() const;
  uint16_t voltage() const;
  void set_voltage(const uint16_t new_voltage);
  size_t maxlenof_voltage() const;
  int16_t current() const;
  void set_current(const int16_t new_current);
  size_t maxlenof_current() const;
  int8_t temperature() const;
  void set_temperature(const int8_t new_temperature);
  size_t maxlenof_temperature() const;
  uint16_t battery_charge() const;
  void set_battery_charge(const uint16_t new_battery_charge);
  size_t maxlenof_battery_charge() const;
  uint16_t battery_capacity() const;
  void set_battery_capacity(const uint16_t new_battery_capacity);
  size_t maxlenof_battery_capacity() const;
  uint16_t wall_signal() const;
  void set_wall_signal(const uint16_t new_wall_signal);
  size_t maxlenof_wall_signal() const;
  uint16_t cliff_left_signal() const;
  void set_cliff_left_signal(const uint16_t new_cliff_left_signal);
  size_t maxlenof_cliff_left_signal() const;
  uint16_t cliff_front_left_signal() const;
  void set_cliff_front_left_signal(const uint16_t new_cliff_front_left_signal);
  size_t maxlenof_cliff_front_left_signal() const;
  uint16_t cliff_front_right_signal() const;
  void set_cliff_front_right_signal(const uint16_t new_cliff_front_right_signal);
  size_t maxlenof_cliff_front_right_signal() const;
  uint16_t cliff_right_signal() const;
  void set_cliff_right_signal(const uint16_t new_cliff_right_signal);
  size_t maxlenof_cliff_right_signal() const;
  bool is_home_base_charger_available() const;
  void set_home_base_charger_available(const bool new_home_base_charger_available);
  size_t maxlenof_home_base_charger_available() const;
  bool is_internal_charger_available() const;
  void set_internal_charger_available(const bool new_internal_charger_available);
  size_t maxlenof_internal_charger_available() const;
  uint8_t song_number() const;
  void set_song_number(const uint8_t new_song_number);
  size_t maxlenof_song_number() const;
  bool is_song_playing() const;
  void set_song_playing(const bool new_song_playing);
  size_t maxlenof_song_playing() const;
  int16_t velocity() const;
  void set_velocity(const int16_t new_velocity);
  size_t maxlenof_velocity() const;
  int16_t radius() const;
  void set_radius(const int16_t new_radius);
  size_t maxlenof_radius() const;
  int16_t velocity_right() const;
  void set_velocity_right(const int16_t new_velocity_right);
  size_t maxlenof_velocity_right() const;
  int16_t velocity_left() const;
  void set_velocity_left(const int16_t new_velocity_left);
  size_t maxlenof_velocity_left() const;
  uint16_t encoder_counts_left() const;
  void set_encoder_counts_left(const uint16_t new_encoder_counts_left);
  size_t maxlenof_encoder_counts_left() const;
  uint16_t encoder_counts_right() const;
  void set_encoder_counts_right(const uint16_t new_encoder_counts_right);
  size_t maxlenof_encoder_counts_right() const;
  bool is_bumper_left() const;
  void set_bumper_left(const bool new_bumper_left);
  size_t maxlenof_bumper_left() const;
  bool is_bumper_front_left() const;
  void set_bumper_front_left(const bool new_bumper_front_left);
  size_t maxlenof_bumper_front_left() const;
  bool is_bumper_center_left() const;
  void set_bumper_center_left(const bool new_bumper_center_left);
  size_t maxlenof_bumper_center_left() const;
  bool is_bumper_center_right() const;
  void set_bumper_center_right(const bool new_bumper_center_right);
  size_t maxlenof_bumper_center_right() const;
  bool is_bumper_front_right() const;
  void set_bumper_front_right(const bool new_bumper_front_right);
  size_t maxlenof_bumper_front_right() const;
  bool is_bumper_right() const;
  void set_bumper_right(const bool new_bumper_right);
  size_t maxlenof_bumper_right() const;
  uint16_t light_bump_left() const;
  void set_light_bump_left(const uint16_t new_light_bump_left);
  size_t maxlenof_light_bump_left() const;
  uint16_t light_bump_front_left() const;
  void set_light_bump_front_left(const uint16_t new_light_bump_front_left);
  size_t maxlenof_light_bump_front_left() const;
  uint16_t light_bump_center_left() const;
  void set_light_bump_center_left(const uint16_t new_light_bump_center_left);
  size_t maxlenof_light_bump_center_left() const;
  uint16_t light_bump_center_right() const;
  void set_light_bump_center_right(const uint16_t new_light_bump_center_right);
  size_t maxlenof_light_bump_center_right() const;
  uint16_t light_bump_front_right() const;
  void set_light_bump_front_right(const uint16_t new_light_bump_front_right);
  size_t maxlenof_light_bump_front_right() const;
  uint16_t light_bump_right() const;
  void set_light_bump_right(const uint16_t new_light_bump_right);
  size_t maxlenof_light_bump_right() const;
  InfraredCharacter ir_opcode_left() const;
  void set_ir_opcode_left(const InfraredCharacter new_ir_opcode_left);
  size_t maxlenof_ir_opcode_left() const;
  InfraredCharacter ir_opcode_right() const;
  void set_ir_opcode_right(const InfraredCharacter new_ir_opcode_right);
  size_t maxlenof_ir_opcode_right() const;
  int16_t left_motor_current() const;
  void set_left_motor_current(const int16_t new_left_motor_current);
  size_t maxlenof_left_motor_current() const;
  int16_t right_motor_current() const;
  void set_right_motor_current(const int16_t new_right_motor_current);
  size_t maxlenof_right_motor_current() const;
  int16_t main_brush_current() const;
  void set_main_brush_current(const int16_t new_main_brush_current);
  size_t maxlenof_main_brush_current() const;
  int16_t side_brush_current() const;
  void set_side_brush_current(const int16_t new_side_brush_current);
  size_t maxlenof_side_brush_current() const;
  bool is_caster_stasis() const;
  void set_caster_stasis(const bool new_caster_stasis);
  size_t maxlenof_caster_stasis() const;
  virtual Message * create_message(const char *type) const;

  virtual void copy_values(const Interface *other);
  virtual const char * enum_tostring(const char *enumtype, int val) const;

};

} // end namespace fawkes

#endif
