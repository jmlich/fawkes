
/***************************************************************************
 *  SkillerDebugInterface.h - Fawkes BlackBoard Interface - SkillerDebugInterface
 *
 *  Templated created:   Thu Oct 12 10:49:19 2006
 *  Copyright  2008  Tim Niemueller
 *
 ****************************************************************************/

/*  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2 of the License, or
 *  (at your option) any later version. A runtime exception applies to
 *  this software (see LICENSE.GPL_WRE file mentioned below for details).
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Library General Public License for more details.
 *
 *  Read the full text in the LICENSE.GPL_WRE file in the doc directory.
 */

#ifndef __INTERFACES_SKILLERDEBUGINTERFACE_H_
#define __INTERFACES_SKILLERDEBUGINTERFACE_H_

#include <interface/interface.h>
#include <interface/message.h>
#include <interface/field_iterator.h>

namespace fawkes {

class SkillerDebugInterface : public Interface
{
 /// @cond INTERNALS
 INTERFACE_MGMT_FRIENDS(SkillerDebugInterface)
 /// @endcond
 public:
  /* constants */

  /** Primary direction of the graph. */
  typedef enum {
    GD_TOP_BOTTOM /**< From top to bottom. */,
    GD_BOTTOM_TOP /**< From bottom to top. */,
    GD_LEFT_RIGHT /**< From left to right. */,
    GD_RIGHT_LEFT /**< From left to right. */
  } GraphDirectionEnum;
  const char * tostring_GraphDirectionEnum(GraphDirectionEnum value) const;

 private:
#pragma pack(push,4)
  /** Internal data storage, do NOT modify! */
  typedef struct {
    int64_t timestamp_sec;  /**< Interface Unix timestamp, seconds */
    int64_t timestamp_usec; /**< Interface Unix timestamp, micro-seconds */
    char graph_fsm[32]; /**< 
      The finite state machine (FSM) the current graph has been updated for.
     */
    char graph[8192]; /**< 
      The selected graph in a dot string representation.
     */
    int32_t graph_dir; /**< 
      Primary direction of current graph.
     */
    bool graph_colored; /**< 
      True if the graph is colored, false otherwise.
     */
  } SkillerDebugInterface_data_t;
#pragma pack(pop)

  SkillerDebugInterface_data_t *data;

  interface_enum_map_t enum_map_GraphDirectionEnum;
 public:
  /* messages */
  class SetGraphMessage : public Message
  {
   private:
#pragma pack(push,4)
    /** Internal data storage, do NOT modify! */
    typedef struct {
      int64_t timestamp_sec;  /**< Interface Unix timestamp, seconds */
      int64_t timestamp_usec; /**< Interface Unix timestamp, micro-seconds */
      char graph_fsm[32]; /**< 
      The finite state machine (FSM) the current graph has been updated for.
     */
    } SetGraphMessage_data_t;
#pragma pack(pop)

    SetGraphMessage_data_t *data;

  interface_enum_map_t enum_map_GraphDirectionEnum;
   public:
    SetGraphMessage(const char * ini_graph_fsm);
    SetGraphMessage();
    ~SetGraphMessage();

    SetGraphMessage(const SetGraphMessage *m);
    /* Methods */
    char * graph_fsm() const;
    void set_graph_fsm(const char * new_graph_fsm);
    size_t maxlenof_graph_fsm() const;
    virtual Message * clone() const;
  };

  class SetGraphDirectionMessage : public Message
  {
   private:
#pragma pack(push,4)
    /** Internal data storage, do NOT modify! */
    typedef struct {
      int64_t timestamp_sec;  /**< Interface Unix timestamp, seconds */
      int64_t timestamp_usec; /**< Interface Unix timestamp, micro-seconds */
      int32_t graph_dir; /**< 
      Primary direction of current graph.
     */
    } SetGraphDirectionMessage_data_t;
#pragma pack(pop)

    SetGraphDirectionMessage_data_t *data;

  interface_enum_map_t enum_map_GraphDirectionEnum;
   public:
    SetGraphDirectionMessage(const GraphDirectionEnum ini_graph_dir);
    SetGraphDirectionMessage();
    ~SetGraphDirectionMessage();

    SetGraphDirectionMessage(const SetGraphDirectionMessage *m);
    /* Methods */
    GraphDirectionEnum graph_dir() const;
    void set_graph_dir(const GraphDirectionEnum new_graph_dir);
    size_t maxlenof_graph_dir() const;
    virtual Message * clone() const;
  };

  class SetGraphColoredMessage : public Message
  {
   private:
#pragma pack(push,4)
    /** Internal data storage, do NOT modify! */
    typedef struct {
      int64_t timestamp_sec;  /**< Interface Unix timestamp, seconds */
      int64_t timestamp_usec; /**< Interface Unix timestamp, micro-seconds */
      bool graph_colored; /**< 
      True if the graph is colored, false otherwise.
     */
    } SetGraphColoredMessage_data_t;
#pragma pack(pop)

    SetGraphColoredMessage_data_t *data;

  interface_enum_map_t enum_map_GraphDirectionEnum;
   public:
    SetGraphColoredMessage(const bool ini_graph_colored);
    SetGraphColoredMessage();
    ~SetGraphColoredMessage();

    SetGraphColoredMessage(const SetGraphColoredMessage *m);
    /* Methods */
    bool is_graph_colored() const;
    void set_graph_colored(const bool new_graph_colored);
    size_t maxlenof_graph_colored() const;
    virtual Message * clone() const;
  };

  virtual bool message_valid(const Message *message) const;
 private:
  SkillerDebugInterface();
  ~SkillerDebugInterface();

 public:
  /* Methods */
  char * graph_fsm() const;
  void set_graph_fsm(const char * new_graph_fsm);
  size_t maxlenof_graph_fsm() const;
  char * graph() const;
  void set_graph(const char * new_graph);
  size_t maxlenof_graph() const;
  GraphDirectionEnum graph_dir() const;
  void set_graph_dir(const GraphDirectionEnum new_graph_dir);
  size_t maxlenof_graph_dir() const;
  bool is_graph_colored() const;
  void set_graph_colored(const bool new_graph_colored);
  size_t maxlenof_graph_colored() const;
  virtual Message * create_message(const char *type) const;

  virtual void copy_values(const Interface *other);
  virtual const char * enum_tostring(const char *enumtype, int val) const;

};

} // end namespace fawkes

#endif
