
/***************************************************************************
 *  NaoSensorInterface.h - Fawkes BlackBoard Interface - NaoSensorInterface
 *
 *  Templated created:   Thu Oct 12 10:49:19 2006
 *  Copyright  2008  Tim Niemueller
 *
 ****************************************************************************/

/*  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2 of the License, or
 *  (at your option) any later version. A runtime exception applies to
 *  this software (see LICENSE.GPL_WRE file mentioned below for details).
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Library General Public License for more details.
 *
 *  Read the full text in the LICENSE.GPL_WRE file in the doc directory.
 */

#ifndef __INTERFACES_NAOSENSORINTERFACE_H_
#define __INTERFACES_NAOSENSORINTERFACE_H_

#include <interface/interface.h>
#include <interface/message.h>
#include <interface/field_iterator.h>

namespace fawkes {

class NaoSensorInterface : public Interface
{
 /// @cond INTERNALS
 INTERFACE_MGMT_FRIENDS(NaoSensorInterface)
 /// @endcond
 public:
  /* constants */

  /** 
	This determines the chosen sender/receiver.
       */
  typedef enum {
    USD_NONE /**< No transmission received, yet. */,
    USD_LEFT_LEFT /**< Left emitter and left receiver. */,
    USD_LEFT_RIGHT /**< Left emitter and right receiver. */,
    USD_RIGHT_RIGHT /**< Right emitter and right receiver. */,
    USD_RIGHT_LEFT /**< Right emitter and left receiver. */,
    USD_BOTH_BOTH /**< Both emitters and both receivers. */
  } UltrasonicDirection;
  const char * tostring_UltrasonicDirection(UltrasonicDirection value) const;

 private:
#pragma pack(push,4)
  /** Internal data storage, do NOT modify! */
  typedef struct {
    int64_t timestamp_sec;  /**< Interface Unix timestamp, seconds */
    int64_t timestamp_usec; /**< Interface Unix timestamp, micro-seconds */
    float accel_x; /**< Accelerometer x */
    float accel_y; /**< Accelerometer y */
    float accel_z; /**< Accelerometer z */
    float gyro_x; /**< Gyrometer x */
    float gyro_y; /**< Gyrometer y */
    float gyro_ref; /**< Gyrometer reference */
    float angle_x; /**< Angle x */
    float angle_y; /**< Angle y */
    float l_fsr_fl; /**< Left FSR front left */
    float l_fsr_fr; /**< Left FSR front right */
    float l_fsr_rl; /**< Left FSR rear left */
    float l_fsr_rr; /**< Left FSR rear right */
    float r_fsr_fl; /**< Right FSR front left */
    float r_fsr_fr; /**< Right FSR front right */
    float r_fsr_rl; /**< Right FSR rear left */
    float r_fsr_rr; /**< Right FSR rear right */
    float l_total_weight; /**< Total weight on left foot */
    float r_total_weight; /**< Total weight on right foot */
    float l_cop_x; /**< Center of pressure X for left foot. */
    float l_cop_y; /**< Center of pressure Y for left foot. */
    float r_cop_x; /**< Center of pressure X for right foot. */
    float r_cop_y; /**< Center of pressure Y for right foot. */
    float ultrasonic_distance_left[4]; /**< 
      First four ultrasonic sensor readings from left receiver. Distance
      to detected object is in meters.
     */
    float ultrasonic_distance_right[4]; /**< 
      First four ultrasonic sensor readings from right receiver. Distance
      to detected object is in meters.
     */
    int32_t ultrasonic_direction; /**< 
      Direction that was used to gather the ultrasonic readings.
     */
    uint8_t l_foot_bumper_l; /**< Left foot bumper left side */
    uint8_t l_foot_bumper_r; /**< Left foot bumper right side */
    uint8_t r_foot_bumper_l; /**< Right foot bumper left side */
    uint8_t r_foot_bumper_r; /**< Right foot bumper right side */
    uint8_t head_touch_front; /**< Front part of head touch sensor (only Academics robot) */
    uint8_t head_touch_middle; /**< Middle part of head touch sensor (only Academics robot) */
    uint8_t head_touch_rear; /**< Rear part of head touch sensor (only Academics robot) */
    uint8_t chest_button; /**< Chest button state */
    float battery_charge; /**< Battery charge */
  } NaoSensorInterface_data_t;
#pragma pack(pop)

  NaoSensorInterface_data_t *data;

  interface_enum_map_t enum_map_UltrasonicDirection;
 public:
  /* messages */
  class EmitUltrasonicWaveMessage : public Message
  {
   private:
#pragma pack(push,4)
    /** Internal data storage, do NOT modify! */
    typedef struct {
      int64_t timestamp_sec;  /**< Interface Unix timestamp, seconds */
      int64_t timestamp_usec; /**< Interface Unix timestamp, micro-seconds */
      int32_t ultrasonic_direction; /**< 
      Direction that was used to gather the ultrasonic readings.
     */
    } EmitUltrasonicWaveMessage_data_t;
#pragma pack(pop)

    EmitUltrasonicWaveMessage_data_t *data;

  interface_enum_map_t enum_map_UltrasonicDirection;
   public:
    EmitUltrasonicWaveMessage(const UltrasonicDirection ini_ultrasonic_direction);
    EmitUltrasonicWaveMessage();
    ~EmitUltrasonicWaveMessage();

    EmitUltrasonicWaveMessage(const EmitUltrasonicWaveMessage *m);
    /* Methods */
    UltrasonicDirection ultrasonic_direction() const;
    void set_ultrasonic_direction(const UltrasonicDirection new_ultrasonic_direction);
    size_t maxlenof_ultrasonic_direction() const;
    virtual Message * clone() const;
  };

  class StartUltrasonicMessage : public Message
  {
   private:
#pragma pack(push,4)
    /** Internal data storage, do NOT modify! */
    typedef struct {
      int64_t timestamp_sec;  /**< Interface Unix timestamp, seconds */
      int64_t timestamp_usec; /**< Interface Unix timestamp, micro-seconds */
      int32_t ultrasonic_direction; /**< 
      Direction that was used to gather the ultrasonic readings.
     */
    } StartUltrasonicMessage_data_t;
#pragma pack(pop)

    StartUltrasonicMessage_data_t *data;

  interface_enum_map_t enum_map_UltrasonicDirection;
   public:
    StartUltrasonicMessage(const UltrasonicDirection ini_ultrasonic_direction);
    StartUltrasonicMessage();
    ~StartUltrasonicMessage();

    StartUltrasonicMessage(const StartUltrasonicMessage *m);
    /* Methods */
    UltrasonicDirection ultrasonic_direction() const;
    void set_ultrasonic_direction(const UltrasonicDirection new_ultrasonic_direction);
    size_t maxlenof_ultrasonic_direction() const;
    virtual Message * clone() const;
  };

  class StopUltrasonicMessage : public Message
  {
   private:
#pragma pack(push,4)
    /** Internal data storage, do NOT modify! */
    typedef struct {
      int64_t timestamp_sec;  /**< Interface Unix timestamp, seconds */
      int64_t timestamp_usec; /**< Interface Unix timestamp, micro-seconds */
    } StopUltrasonicMessage_data_t;
#pragma pack(pop)

    StopUltrasonicMessage_data_t *data;

  interface_enum_map_t enum_map_UltrasonicDirection;
   public:
    StopUltrasonicMessage();
    ~StopUltrasonicMessage();

    StopUltrasonicMessage(const StopUltrasonicMessage *m);
    /* Methods */
    virtual Message * clone() const;
  };

  virtual bool message_valid(const Message *message) const;
 private:
  NaoSensorInterface();
  ~NaoSensorInterface();

 public:
  /* Methods */
  float accel_x() const;
  void set_accel_x(const float new_accel_x);
  size_t maxlenof_accel_x() const;
  float accel_y() const;
  void set_accel_y(const float new_accel_y);
  size_t maxlenof_accel_y() const;
  float accel_z() const;
  void set_accel_z(const float new_accel_z);
  size_t maxlenof_accel_z() const;
  float gyro_x() const;
  void set_gyro_x(const float new_gyro_x);
  size_t maxlenof_gyro_x() const;
  float gyro_y() const;
  void set_gyro_y(const float new_gyro_y);
  size_t maxlenof_gyro_y() const;
  float gyro_ref() const;
  void set_gyro_ref(const float new_gyro_ref);
  size_t maxlenof_gyro_ref() const;
  float angle_x() const;
  void set_angle_x(const float new_angle_x);
  size_t maxlenof_angle_x() const;
  float angle_y() const;
  void set_angle_y(const float new_angle_y);
  size_t maxlenof_angle_y() const;
  float l_fsr_fl() const;
  void set_l_fsr_fl(const float new_l_fsr_fl);
  size_t maxlenof_l_fsr_fl() const;
  float l_fsr_fr() const;
  void set_l_fsr_fr(const float new_l_fsr_fr);
  size_t maxlenof_l_fsr_fr() const;
  float l_fsr_rl() const;
  void set_l_fsr_rl(const float new_l_fsr_rl);
  size_t maxlenof_l_fsr_rl() const;
  float l_fsr_rr() const;
  void set_l_fsr_rr(const float new_l_fsr_rr);
  size_t maxlenof_l_fsr_rr() const;
  float r_fsr_fl() const;
  void set_r_fsr_fl(const float new_r_fsr_fl);
  size_t maxlenof_r_fsr_fl() const;
  float r_fsr_fr() const;
  void set_r_fsr_fr(const float new_r_fsr_fr);
  size_t maxlenof_r_fsr_fr() const;
  float r_fsr_rl() const;
  void set_r_fsr_rl(const float new_r_fsr_rl);
  size_t maxlenof_r_fsr_rl() const;
  float r_fsr_rr() const;
  void set_r_fsr_rr(const float new_r_fsr_rr);
  size_t maxlenof_r_fsr_rr() const;
  float l_total_weight() const;
  void set_l_total_weight(const float new_l_total_weight);
  size_t maxlenof_l_total_weight() const;
  float r_total_weight() const;
  void set_r_total_weight(const float new_r_total_weight);
  size_t maxlenof_r_total_weight() const;
  float l_cop_x() const;
  void set_l_cop_x(const float new_l_cop_x);
  size_t maxlenof_l_cop_x() const;
  float l_cop_y() const;
  void set_l_cop_y(const float new_l_cop_y);
  size_t maxlenof_l_cop_y() const;
  float r_cop_x() const;
  void set_r_cop_x(const float new_r_cop_x);
  size_t maxlenof_r_cop_x() const;
  float r_cop_y() const;
  void set_r_cop_y(const float new_r_cop_y);
  size_t maxlenof_r_cop_y() const;
  float * ultrasonic_distance_left() const;
  float ultrasonic_distance_left(unsigned int index) const;
  void set_ultrasonic_distance_left(unsigned int index, const float new_ultrasonic_distance_left);
  void set_ultrasonic_distance_left(const float * new_ultrasonic_distance_left);
  size_t maxlenof_ultrasonic_distance_left() const;
  float * ultrasonic_distance_right() const;
  float ultrasonic_distance_right(unsigned int index) const;
  void set_ultrasonic_distance_right(unsigned int index, const float new_ultrasonic_distance_right);
  void set_ultrasonic_distance_right(const float * new_ultrasonic_distance_right);
  size_t maxlenof_ultrasonic_distance_right() const;
  UltrasonicDirection ultrasonic_direction() const;
  void set_ultrasonic_direction(const UltrasonicDirection new_ultrasonic_direction);
  size_t maxlenof_ultrasonic_direction() const;
  uint8_t l_foot_bumper_l() const;
  void set_l_foot_bumper_l(const uint8_t new_l_foot_bumper_l);
  size_t maxlenof_l_foot_bumper_l() const;
  uint8_t l_foot_bumper_r() const;
  void set_l_foot_bumper_r(const uint8_t new_l_foot_bumper_r);
  size_t maxlenof_l_foot_bumper_r() const;
  uint8_t r_foot_bumper_l() const;
  void set_r_foot_bumper_l(const uint8_t new_r_foot_bumper_l);
  size_t maxlenof_r_foot_bumper_l() const;
  uint8_t r_foot_bumper_r() const;
  void set_r_foot_bumper_r(const uint8_t new_r_foot_bumper_r);
  size_t maxlenof_r_foot_bumper_r() const;
  uint8_t head_touch_front() const;
  void set_head_touch_front(const uint8_t new_head_touch_front);
  size_t maxlenof_head_touch_front() const;
  uint8_t head_touch_middle() const;
  void set_head_touch_middle(const uint8_t new_head_touch_middle);
  size_t maxlenof_head_touch_middle() const;
  uint8_t head_touch_rear() const;
  void set_head_touch_rear(const uint8_t new_head_touch_rear);
  size_t maxlenof_head_touch_rear() const;
  uint8_t chest_button() const;
  void set_chest_button(const uint8_t new_chest_button);
  size_t maxlenof_chest_button() const;
  float battery_charge() const;
  void set_battery_charge(const float new_battery_charge);
  size_t maxlenof_battery_charge() const;
  virtual Message * create_message(const char *type) const;

  virtual void copy_values(const Interface *other);
  virtual const char * enum_tostring(const char *enumtype, int val) const;

};

} // end namespace fawkes

#endif
