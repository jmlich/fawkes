
/***************************************************************************
 *  NaoJointPositionInterface.h - Fawkes BlackBoard Interface - NaoJointPositionInterface
 *
 *  Templated created:   Thu Oct 12 10:49:19 2006
 *  Copyright  2008-2011  Tim Niemueller
 *
 ****************************************************************************/

/*  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2 of the License, or
 *  (at your option) any later version. A runtime exception applies to
 *  this software (see LICENSE.GPL_WRE file mentioned below for details).
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Library General Public License for more details.
 *
 *  Read the full text in the LICENSE.GPL_WRE file in the doc directory.
 */

#ifndef __INTERFACES_NAOJOINTPOSITIONINTERFACE_H_
#define __INTERFACES_NAOJOINTPOSITIONINTERFACE_H_

#include <interface/interface.h>
#include <interface/message.h>
#include <interface/field_iterator.h>

namespace fawkes {

class NaoJointPositionInterface : public Interface
{
 /// @cond INTERNALS
 INTERFACE_MGMT_FRIENDS(NaoJointPositionInterface)
 /// @endcond
 public:
  /* constants */
  static const uint32_t SERVO_head_yaw;
  static const uint32_t SERVO_head_pitch;
  static const uint32_t SERVO_l_shoulder_pitch;
  static const uint32_t SERVO_l_shoulder_roll;
  static const uint32_t SERVO_l_elbow_yaw;
  static const uint32_t SERVO_l_elbow_roll;
  static const uint32_t SERVO_l_wrist_yaw;
  static const uint32_t SERVO_l_hand;
  static const uint32_t SERVO_l_hip_yaw_pitch;
  static const uint32_t SERVO_l_hip_roll;
  static const uint32_t SERVO_l_hip_pitch;
  static const uint32_t SERVO_l_knee_pitch;
  static const uint32_t SERVO_l_ankle_pitch;
  static const uint32_t SERVO_l_ankle_roll;
  static const uint32_t SERVO_r_shoulder_pitch;
  static const uint32_t SERVO_r_shoulder_roll;
  static const uint32_t SERVO_r_elbow_yaw;
  static const uint32_t SERVO_r_elbow_roll;
  static const uint32_t SERVO_r_wrist_yaw;
  static const uint32_t SERVO_r_hand;
  static const uint32_t SERVO_r_hip_yaw_pitch;
  static const uint32_t SERVO_r_hip_roll;
  static const uint32_t SERVO_r_hip_pitch;
  static const uint32_t SERVO_r_knee_pitch;
  static const uint32_t SERVO_r_ankle_pitch;
  static const uint32_t SERVO_r_ankle_roll;
  static const uint32_t SERVO_min;
  static const uint32_t SERVO_max;

  /** 
        Enumeration describing the actual version of the robot that's being
	used.
       */
  typedef enum {
    ROBOTYPE_ACADEMIC /**< 
        Academic version with 25 DoF and touch sensors.
       */,
    ROBOTYPE_ROBOCUP /**< 
	RoboCup version with 21 DoF.
       */
  } RobotType;
  const char * tostring_RobotType(RobotType value) const;

 private:
#pragma pack(push,4)
  /** Internal data storage, do NOT modify! */
  typedef struct {
    int64_t timestamp_sec;  /**< Interface Unix timestamp, seconds */
    int64_t timestamp_usec; /**< Interface Unix timestamp, micro-seconds */
    int32_t robot_type; /**< Robot type. */
    uint8_t robot_version[4]; /**< 
      Robot version. Fields are in ascending array index major, minor, micro and
      patch level. Currently only the first two are used by Aldebaran, but due to
      struct alignment we add two extra bytes.
     */
    float head_yaw; /**< Head yaw */
    float head_pitch; /**< Head pitch */
    float l_shoulder_pitch; /**< Left shoulder pitch */
    float l_shoulder_roll; /**< Left shoulder roll */
    float l_elbow_yaw; /**< Left elbow yaw */
    float l_elbow_roll; /**< Left elbow roll */
    float l_wrist_yaw; /**< Left wrist yaw */
    float l_hand; /**< Left hand */
    float l_hip_yaw_pitch; /**< Left hip yaw pitch */
    float l_hip_roll; /**< Left hip roll */
    float l_hip_pitch; /**< Left hip pitch */
    float l_knee_pitch; /**< Left knee pitch */
    float l_ankle_pitch; /**< Left ankle pitch */
    float l_ankle_roll; /**< Left ankle roll */
    float r_shoulder_pitch; /**< Right shoulder pitch */
    float r_shoulder_roll; /**< Right shoulder roll */
    float r_elbow_yaw; /**< Right elbow yaw */
    float r_elbow_roll; /**< Right elbow roll */
    float r_wrist_yaw; /**< Right wrist yaw */
    float r_hand; /**< Right hand */
    float r_hip_yaw_pitch; /**< Right hip yaw pitch */
    float r_hip_roll; /**< Right hip roll */
    float r_hip_pitch; /**< Right hip pitch */
    float r_knee_pitch; /**< Right knee pitch */
    float r_ankle_pitch; /**< Right ankle pitch */
    float r_ankle_roll; /**< Right ankle roll */
    int32_t time; /**< 
      Current reference time in ms. For real hardware this is the DCM time.
      Times in messages are always offsets to the current time and the current
      time is added before executing the command.
     */
  } NaoJointPositionInterface_data_t;
#pragma pack(pop)

  NaoJointPositionInterface_data_t *data;

  interface_enum_map_t enum_map_RobotType;
 public:
  /* messages */
  class SetServoMessage : public Message
  {
   private:
#pragma pack(push,4)
    /** Internal data storage, do NOT modify! */
    typedef struct {
      int64_t timestamp_sec;  /**< Interface Unix timestamp, seconds */
      int64_t timestamp_usec; /**< Interface Unix timestamp, micro-seconds */
      uint32_t servo; /**< A concatenated list of SERVO_* constants to
      define the servos that should execute the movement. The list shall consist of
      binary or'ed SERVO_* constants. */
      float value; /**< Servo value to set for servos. */
      int32_t time; /**< 
      Current reference time in ms. For real hardware this is the DCM time.
      Times in messages are always offsets to the current time and the current
      time is added before executing the command.
     */
    } SetServoMessage_data_t;
#pragma pack(pop)

    SetServoMessage_data_t *data;

  interface_enum_map_t enum_map_RobotType;
   public:
    SetServoMessage(const uint32_t ini_servo, const float ini_value, const int32_t ini_time);
    SetServoMessage();
    ~SetServoMessage();

    SetServoMessage(const SetServoMessage *m);
    /* Methods */
    uint32_t servo() const;
    void set_servo(const uint32_t new_servo);
    size_t maxlenof_servo() const;
    float value() const;
    void set_value(const float new_value);
    size_t maxlenof_value() const;
    int32_t time() const;
    void set_time(const int32_t new_time);
    size_t maxlenof_time() const;
    virtual Message * clone() const;
  };

  class SetServosMessage : public Message
  {
   private:
#pragma pack(push,4)
    /** Internal data storage, do NOT modify! */
    typedef struct {
      int64_t timestamp_sec;  /**< Interface Unix timestamp, seconds */
      int64_t timestamp_usec; /**< Interface Unix timestamp, micro-seconds */
      float head_yaw; /**< Head yaw */
      float head_pitch; /**< Head pitch */
      float l_shoulder_pitch; /**< Left shoulder pitch */
      float l_shoulder_roll; /**< Left shoulder roll */
      float l_elbow_yaw; /**< Left elbow yaw */
      float l_elbow_roll; /**< Left elbow roll */
      float l_hip_yaw_pitch; /**< Left hip yaw pitch */
      float l_hip_roll; /**< Left hip roll */
      float l_hip_pitch; /**< Left hip pitch */
      float l_knee_pitch; /**< Left knee pitch */
      float l_ankle_pitch; /**< Left ankle pitch */
      float l_ankle_roll; /**< Left ankle roll */
      float l_wrist_yaw; /**< Left wrist yaw */
      float l_hand; /**< Left hand */
      float r_shoulder_pitch; /**< Right shoulder pitch */
      float r_shoulder_roll; /**< Right shoulder roll */
      float r_elbow_yaw; /**< Right elbow yaw */
      float r_elbow_roll; /**< Right elbow roll */
      float r_wrist_yaw; /**< Right wrist yaw */
      float r_hand; /**< Right hand */
      float r_hip_yaw_pitch; /**< Right hip yaw pitch */
      float r_hip_roll; /**< Right hip roll */
      float r_hip_pitch; /**< Right hip pitch */
      float r_knee_pitch; /**< Right knee pitch */
      float r_ankle_pitch; /**< Right ankle pitch */
      float r_ankle_roll; /**< Right ankle roll */
      int32_t time; /**< 
      Current reference time in ms. For real hardware this is the DCM time.
      Times in messages are always offsets to the current time and the current
      time is added before executing the command.
     */
    } SetServosMessage_data_t;
#pragma pack(pop)

    SetServosMessage_data_t *data;

  interface_enum_map_t enum_map_RobotType;
   public:
    SetServosMessage(const float ini_head_yaw, const float ini_head_pitch, const float ini_l_shoulder_pitch, const float ini_l_shoulder_roll, const float ini_l_elbow_yaw, const float ini_l_elbow_roll, const float ini_l_hip_yaw_pitch, const float ini_l_hip_roll, const float ini_l_hip_pitch, const float ini_l_knee_pitch, const float ini_l_ankle_pitch, const float ini_l_ankle_roll, const float ini_l_wrist_yaw, const float ini_l_hand, const float ini_r_shoulder_pitch, const float ini_r_shoulder_roll, const float ini_r_elbow_yaw, const float ini_r_elbow_roll, const float ini_r_wrist_yaw, const float ini_r_hand, const float ini_r_hip_yaw_pitch, const float ini_r_hip_roll, const float ini_r_hip_pitch, const float ini_r_knee_pitch, const float ini_r_ankle_pitch, const float ini_r_ankle_roll, const int32_t ini_time);
    SetServosMessage();
    ~SetServosMessage();

    SetServosMessage(const SetServosMessage *m);
    /* Methods */
    float head_yaw() const;
    void set_head_yaw(const float new_head_yaw);
    size_t maxlenof_head_yaw() const;
    float head_pitch() const;
    void set_head_pitch(const float new_head_pitch);
    size_t maxlenof_head_pitch() const;
    float l_shoulder_pitch() const;
    void set_l_shoulder_pitch(const float new_l_shoulder_pitch);
    size_t maxlenof_l_shoulder_pitch() const;
    float l_shoulder_roll() const;
    void set_l_shoulder_roll(const float new_l_shoulder_roll);
    size_t maxlenof_l_shoulder_roll() const;
    float l_elbow_yaw() const;
    void set_l_elbow_yaw(const float new_l_elbow_yaw);
    size_t maxlenof_l_elbow_yaw() const;
    float l_elbow_roll() const;
    void set_l_elbow_roll(const float new_l_elbow_roll);
    size_t maxlenof_l_elbow_roll() const;
    float l_hip_yaw_pitch() const;
    void set_l_hip_yaw_pitch(const float new_l_hip_yaw_pitch);
    size_t maxlenof_l_hip_yaw_pitch() const;
    float l_hip_roll() const;
    void set_l_hip_roll(const float new_l_hip_roll);
    size_t maxlenof_l_hip_roll() const;
    float l_hip_pitch() const;
    void set_l_hip_pitch(const float new_l_hip_pitch);
    size_t maxlenof_l_hip_pitch() const;
    float l_knee_pitch() const;
    void set_l_knee_pitch(const float new_l_knee_pitch);
    size_t maxlenof_l_knee_pitch() const;
    float l_ankle_pitch() const;
    void set_l_ankle_pitch(const float new_l_ankle_pitch);
    size_t maxlenof_l_ankle_pitch() const;
    float l_ankle_roll() const;
    void set_l_ankle_roll(const float new_l_ankle_roll);
    size_t maxlenof_l_ankle_roll() const;
    float l_wrist_yaw() const;
    void set_l_wrist_yaw(const float new_l_wrist_yaw);
    size_t maxlenof_l_wrist_yaw() const;
    float l_hand() const;
    void set_l_hand(const float new_l_hand);
    size_t maxlenof_l_hand() const;
    float r_shoulder_pitch() const;
    void set_r_shoulder_pitch(const float new_r_shoulder_pitch);
    size_t maxlenof_r_shoulder_pitch() const;
    float r_shoulder_roll() const;
    void set_r_shoulder_roll(const float new_r_shoulder_roll);
    size_t maxlenof_r_shoulder_roll() const;
    float r_elbow_yaw() const;
    void set_r_elbow_yaw(const float new_r_elbow_yaw);
    size_t maxlenof_r_elbow_yaw() const;
    float r_elbow_roll() const;
    void set_r_elbow_roll(const float new_r_elbow_roll);
    size_t maxlenof_r_elbow_roll() const;
    float r_wrist_yaw() const;
    void set_r_wrist_yaw(const float new_r_wrist_yaw);
    size_t maxlenof_r_wrist_yaw() const;
    float r_hand() const;
    void set_r_hand(const float new_r_hand);
    size_t maxlenof_r_hand() const;
    float r_hip_yaw_pitch() const;
    void set_r_hip_yaw_pitch(const float new_r_hip_yaw_pitch);
    size_t maxlenof_r_hip_yaw_pitch() const;
    float r_hip_roll() const;
    void set_r_hip_roll(const float new_r_hip_roll);
    size_t maxlenof_r_hip_roll() const;
    float r_hip_pitch() const;
    void set_r_hip_pitch(const float new_r_hip_pitch);
    size_t maxlenof_r_hip_pitch() const;
    float r_knee_pitch() const;
    void set_r_knee_pitch(const float new_r_knee_pitch);
    size_t maxlenof_r_knee_pitch() const;
    float r_ankle_pitch() const;
    void set_r_ankle_pitch(const float new_r_ankle_pitch);
    size_t maxlenof_r_ankle_pitch() const;
    float r_ankle_roll() const;
    void set_r_ankle_roll(const float new_r_ankle_roll);
    size_t maxlenof_r_ankle_roll() const;
    int32_t time() const;
    void set_time(const int32_t new_time);
    size_t maxlenof_time() const;
    virtual Message * clone() const;
  };

  class MoveServoMessage : public Message
  {
   private:
#pragma pack(push,4)
    /** Internal data storage, do NOT modify! */
    typedef struct {
      int64_t timestamp_sec;  /**< Interface Unix timestamp, seconds */
      int64_t timestamp_usec; /**< Interface Unix timestamp, micro-seconds */
      uint32_t servo; /**< 
      A concatenated list of SERVO_* constants to define the servos
      that should execute the movement. The list shall consist of
      binary or'ed SERVO_* constants.
     */
      float value; /**< Servo value to set for servos. */
      float speed; /**< 
      Fraction of max speed in range [0.0..1.0].
     */
    } MoveServoMessage_data_t;
#pragma pack(pop)

    MoveServoMessage_data_t *data;

  interface_enum_map_t enum_map_RobotType;
   public:
    MoveServoMessage(const uint32_t ini_servo, const float ini_value, const float ini_speed);
    MoveServoMessage();
    ~MoveServoMessage();

    MoveServoMessage(const MoveServoMessage *m);
    /* Methods */
    uint32_t servo() const;
    void set_servo(const uint32_t new_servo);
    size_t maxlenof_servo() const;
    float value() const;
    void set_value(const float new_value);
    size_t maxlenof_value() const;
    float speed() const;
    void set_speed(const float new_speed);
    size_t maxlenof_speed() const;
    virtual Message * clone() const;
  };

  class MoveServosMessage : public Message
  {
   private:
#pragma pack(push,4)
    /** Internal data storage, do NOT modify! */
    typedef struct {
      int64_t timestamp_sec;  /**< Interface Unix timestamp, seconds */
      int64_t timestamp_usec; /**< Interface Unix timestamp, micro-seconds */
      float speed; /**< 
      Fraction of max speed in range [0.0..1.0].
     */
      float head_yaw; /**< Head yaw */
      float head_pitch; /**< Head pitch */
      float l_shoulder_pitch; /**< Left shoulder pitch */
      float l_shoulder_roll; /**< Left shoulder roll */
      float l_elbow_yaw; /**< Left elbow yaw */
      float l_elbow_roll; /**< Left elbow roll */
      float l_wrist_yaw; /**< Left wrist yaw */
      float l_hand; /**< Left hand */
      float l_hip_yaw_pitch; /**< Left hip yaw pitch */
      float l_hip_roll; /**< Left hip roll */
      float l_hip_pitch; /**< Left hip pitch */
      float l_knee_pitch; /**< Left knee pitch */
      float l_ankle_pitch; /**< Left ankle pitch */
      float l_ankle_roll; /**< Left ankle roll */
      float r_shoulder_pitch; /**< Right shoulder pitch */
      float r_shoulder_roll; /**< Right shoulder roll */
      float r_elbow_yaw; /**< Right elbow yaw */
      float r_elbow_roll; /**< Right elbow roll */
      float r_wrist_yaw; /**< Right wrist yaw */
      float r_hand; /**< Right hand */
      float r_hip_yaw_pitch; /**< Right hip yaw pitch */
      float r_hip_roll; /**< Right hip roll */
      float r_hip_pitch; /**< Right hip pitch */
      float r_knee_pitch; /**< Right knee pitch */
      float r_ankle_pitch; /**< Right ankle pitch */
      float r_ankle_roll; /**< Right ankle roll */
    } MoveServosMessage_data_t;
#pragma pack(pop)

    MoveServosMessage_data_t *data;

  interface_enum_map_t enum_map_RobotType;
   public:
    MoveServosMessage(const float ini_speed, const float ini_head_yaw, const float ini_head_pitch, const float ini_l_shoulder_pitch, const float ini_l_shoulder_roll, const float ini_l_elbow_yaw, const float ini_l_elbow_roll, const float ini_l_wrist_yaw, const float ini_l_hand, const float ini_l_hip_yaw_pitch, const float ini_l_hip_roll, const float ini_l_hip_pitch, const float ini_l_knee_pitch, const float ini_l_ankle_pitch, const float ini_l_ankle_roll, const float ini_r_shoulder_pitch, const float ini_r_shoulder_roll, const float ini_r_elbow_yaw, const float ini_r_elbow_roll, const float ini_r_wrist_yaw, const float ini_r_hand, const float ini_r_hip_yaw_pitch, const float ini_r_hip_roll, const float ini_r_hip_pitch, const float ini_r_knee_pitch, const float ini_r_ankle_pitch, const float ini_r_ankle_roll);
    MoveServosMessage();
    ~MoveServosMessage();

    MoveServosMessage(const MoveServosMessage *m);
    /* Methods */
    float speed() const;
    void set_speed(const float new_speed);
    size_t maxlenof_speed() const;
    float head_yaw() const;
    void set_head_yaw(const float new_head_yaw);
    size_t maxlenof_head_yaw() const;
    float head_pitch() const;
    void set_head_pitch(const float new_head_pitch);
    size_t maxlenof_head_pitch() const;
    float l_shoulder_pitch() const;
    void set_l_shoulder_pitch(const float new_l_shoulder_pitch);
    size_t maxlenof_l_shoulder_pitch() const;
    float l_shoulder_roll() const;
    void set_l_shoulder_roll(const float new_l_shoulder_roll);
    size_t maxlenof_l_shoulder_roll() const;
    float l_elbow_yaw() const;
    void set_l_elbow_yaw(const float new_l_elbow_yaw);
    size_t maxlenof_l_elbow_yaw() const;
    float l_elbow_roll() const;
    void set_l_elbow_roll(const float new_l_elbow_roll);
    size_t maxlenof_l_elbow_roll() const;
    float l_wrist_yaw() const;
    void set_l_wrist_yaw(const float new_l_wrist_yaw);
    size_t maxlenof_l_wrist_yaw() const;
    float l_hand() const;
    void set_l_hand(const float new_l_hand);
    size_t maxlenof_l_hand() const;
    float l_hip_yaw_pitch() const;
    void set_l_hip_yaw_pitch(const float new_l_hip_yaw_pitch);
    size_t maxlenof_l_hip_yaw_pitch() const;
    float l_hip_roll() const;
    void set_l_hip_roll(const float new_l_hip_roll);
    size_t maxlenof_l_hip_roll() const;
    float l_hip_pitch() const;
    void set_l_hip_pitch(const float new_l_hip_pitch);
    size_t maxlenof_l_hip_pitch() const;
    float l_knee_pitch() const;
    void set_l_knee_pitch(const float new_l_knee_pitch);
    size_t maxlenof_l_knee_pitch() const;
    float l_ankle_pitch() const;
    void set_l_ankle_pitch(const float new_l_ankle_pitch);
    size_t maxlenof_l_ankle_pitch() const;
    float l_ankle_roll() const;
    void set_l_ankle_roll(const float new_l_ankle_roll);
    size_t maxlenof_l_ankle_roll() const;
    float r_shoulder_pitch() const;
    void set_r_shoulder_pitch(const float new_r_shoulder_pitch);
    size_t maxlenof_r_shoulder_pitch() const;
    float r_shoulder_roll() const;
    void set_r_shoulder_roll(const float new_r_shoulder_roll);
    size_t maxlenof_r_shoulder_roll() const;
    float r_elbow_yaw() const;
    void set_r_elbow_yaw(const float new_r_elbow_yaw);
    size_t maxlenof_r_elbow_yaw() const;
    float r_elbow_roll() const;
    void set_r_elbow_roll(const float new_r_elbow_roll);
    size_t maxlenof_r_elbow_roll() const;
    float r_wrist_yaw() const;
    void set_r_wrist_yaw(const float new_r_wrist_yaw);
    size_t maxlenof_r_wrist_yaw() const;
    float r_hand() const;
    void set_r_hand(const float new_r_hand);
    size_t maxlenof_r_hand() const;
    float r_hip_yaw_pitch() const;
    void set_r_hip_yaw_pitch(const float new_r_hip_yaw_pitch);
    size_t maxlenof_r_hip_yaw_pitch() const;
    float r_hip_roll() const;
    void set_r_hip_roll(const float new_r_hip_roll);
    size_t maxlenof_r_hip_roll() const;
    float r_hip_pitch() const;
    void set_r_hip_pitch(const float new_r_hip_pitch);
    size_t maxlenof_r_hip_pitch() const;
    float r_knee_pitch() const;
    void set_r_knee_pitch(const float new_r_knee_pitch);
    size_t maxlenof_r_knee_pitch() const;
    float r_ankle_pitch() const;
    void set_r_ankle_pitch(const float new_r_ankle_pitch);
    size_t maxlenof_r_ankle_pitch() const;
    float r_ankle_roll() const;
    void set_r_ankle_roll(const float new_r_ankle_roll);
    size_t maxlenof_r_ankle_roll() const;
    virtual Message * clone() const;
  };

  virtual bool message_valid(const Message *message) const;
 private:
  NaoJointPositionInterface();
  ~NaoJointPositionInterface();

 public:
  /* Methods */
  RobotType robot_type() const;
  void set_robot_type(const RobotType new_robot_type);
  size_t maxlenof_robot_type() const;
  uint8_t * robot_version() const;
  uint8_t robot_version(unsigned int index) const;
  void set_robot_version(unsigned int index, const uint8_t new_robot_version);
  void set_robot_version(const uint8_t * new_robot_version);
  size_t maxlenof_robot_version() const;
  float head_yaw() const;
  void set_head_yaw(const float new_head_yaw);
  size_t maxlenof_head_yaw() const;
  float head_pitch() const;
  void set_head_pitch(const float new_head_pitch);
  size_t maxlenof_head_pitch() const;
  float l_shoulder_pitch() const;
  void set_l_shoulder_pitch(const float new_l_shoulder_pitch);
  size_t maxlenof_l_shoulder_pitch() const;
  float l_shoulder_roll() const;
  void set_l_shoulder_roll(const float new_l_shoulder_roll);
  size_t maxlenof_l_shoulder_roll() const;
  float l_elbow_yaw() const;
  void set_l_elbow_yaw(const float new_l_elbow_yaw);
  size_t maxlenof_l_elbow_yaw() const;
  float l_elbow_roll() const;
  void set_l_elbow_roll(const float new_l_elbow_roll);
  size_t maxlenof_l_elbow_roll() const;
  float l_wrist_yaw() const;
  void set_l_wrist_yaw(const float new_l_wrist_yaw);
  size_t maxlenof_l_wrist_yaw() const;
  float l_hand() const;
  void set_l_hand(const float new_l_hand);
  size_t maxlenof_l_hand() const;
  float l_hip_yaw_pitch() const;
  void set_l_hip_yaw_pitch(const float new_l_hip_yaw_pitch);
  size_t maxlenof_l_hip_yaw_pitch() const;
  float l_hip_roll() const;
  void set_l_hip_roll(const float new_l_hip_roll);
  size_t maxlenof_l_hip_roll() const;
  float l_hip_pitch() const;
  void set_l_hip_pitch(const float new_l_hip_pitch);
  size_t maxlenof_l_hip_pitch() const;
  float l_knee_pitch() const;
  void set_l_knee_pitch(const float new_l_knee_pitch);
  size_t maxlenof_l_knee_pitch() const;
  float l_ankle_pitch() const;
  void set_l_ankle_pitch(const float new_l_ankle_pitch);
  size_t maxlenof_l_ankle_pitch() const;
  float l_ankle_roll() const;
  void set_l_ankle_roll(const float new_l_ankle_roll);
  size_t maxlenof_l_ankle_roll() const;
  float r_shoulder_pitch() const;
  void set_r_shoulder_pitch(const float new_r_shoulder_pitch);
  size_t maxlenof_r_shoulder_pitch() const;
  float r_shoulder_roll() const;
  void set_r_shoulder_roll(const float new_r_shoulder_roll);
  size_t maxlenof_r_shoulder_roll() const;
  float r_elbow_yaw() const;
  void set_r_elbow_yaw(const float new_r_elbow_yaw);
  size_t maxlenof_r_elbow_yaw() const;
  float r_elbow_roll() const;
  void set_r_elbow_roll(const float new_r_elbow_roll);
  size_t maxlenof_r_elbow_roll() const;
  float r_wrist_yaw() const;
  void set_r_wrist_yaw(const float new_r_wrist_yaw);
  size_t maxlenof_r_wrist_yaw() const;
  float r_hand() const;
  void set_r_hand(const float new_r_hand);
  size_t maxlenof_r_hand() const;
  float r_hip_yaw_pitch() const;
  void set_r_hip_yaw_pitch(const float new_r_hip_yaw_pitch);
  size_t maxlenof_r_hip_yaw_pitch() const;
  float r_hip_roll() const;
  void set_r_hip_roll(const float new_r_hip_roll);
  size_t maxlenof_r_hip_roll() const;
  float r_hip_pitch() const;
  void set_r_hip_pitch(const float new_r_hip_pitch);
  size_t maxlenof_r_hip_pitch() const;
  float r_knee_pitch() const;
  void set_r_knee_pitch(const float new_r_knee_pitch);
  size_t maxlenof_r_knee_pitch() const;
  float r_ankle_pitch() const;
  void set_r_ankle_pitch(const float new_r_ankle_pitch);
  size_t maxlenof_r_ankle_pitch() const;
  float r_ankle_roll() const;
  void set_r_ankle_roll(const float new_r_ankle_roll);
  size_t maxlenof_r_ankle_roll() const;
  int32_t time() const;
  void set_time(const int32_t new_time);
  size_t maxlenof_time() const;
  virtual Message * create_message(const char *type) const;

  virtual void copy_values(const Interface *other);
  virtual const char * enum_tostring(const char *enumtype, int val) const;

};

} // end namespace fawkes

#endif
