
/***************************************************************************
 *  JacoBimanualInterface.h - Fawkes BlackBoard Interface - JacoBimanualInterface
 *
 *  Templated created:   Thu Oct 12 10:49:19 2006
 *  Copyright  2014  Bahram Maleki-Fard
 *
 ****************************************************************************/

/*  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2 of the License, or
 *  (at your option) any later version. A runtime exception applies to
 *  this software (see LICENSE.GPL_WRE file mentioned below for details).
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Library General Public License for more details.
 *
 *  Read the full text in the LICENSE.GPL_WRE file in the doc directory.
 */

#ifndef __INTERFACES_JACOBIMANUALINTERFACE_H_
#define __INTERFACES_JACOBIMANUALINTERFACE_H_

#include <interface/interface.h>
#include <interface/message.h>
#include <interface/field_iterator.h>

namespace fawkes {

class JacoBimanualInterface : public Interface
{
 /// @cond INTERNALS
 INTERFACE_MGMT_FRIENDS(JacoBimanualInterface)
 /// @endcond
 public:
  /* constants */
  static const uint32_t ERROR_NONE;
  static const uint32_t ERROR_UNSPECIFIC;
  static const uint32_t ERROR_NO_IK;
  static const uint32_t ERROR_PLANNING;

 private:
#pragma pack(push,4)
  /** Internal data storage, do NOT modify! */
  typedef struct {
    int64_t timestamp_sec;  /**< Interface Unix timestamp, seconds */
    int64_t timestamp_usec; /**< Interface Unix timestamp, micro-seconds */
    uint32_t msgid; /**< The ID of the message that is currently being
      processed, or 0 if no message is being processed. */
    bool final; /**< True, if the last command has been finished,
      false if it is still running */
    uint32_t error_code; /**< Error code, set if
      final is true. 0 if no error occured, an error code from ERROR_*
      constants otherwise. */
    bool constrained; /**< Wheter planning is using constraint-function.
      This is an OpenRAVE internal constraint function. */
  } JacoBimanualInterface_data_t;
#pragma pack(pop)

  JacoBimanualInterface_data_t *data;

 public:
  /* messages */
  class CartesianGotoMessage : public Message
  {
   private:
#pragma pack(push,4)
    /** Internal data storage, do NOT modify! */
    typedef struct {
      int64_t timestamp_sec;  /**< Interface Unix timestamp, seconds */
      int64_t timestamp_usec; /**< Interface Unix timestamp, micro-seconds */
      float l_x; /**< X-coordinate of left manipulator */
      float l_y; /**< Y-coordinate of left manipulator */
      float l_z; /**< Z-coordinate of left manipulator */
      float l_e1; /**< 1st Euler angle of left manipulator rotation */
      float l_e2; /**< 2nd Euler angle of left manipulator rotation */
      float l_e3; /**< 3rd Euler angle of left manipulator rotation */
      float r_x; /**< X-coordinate of right manipulator */
      float r_y; /**< Y-coordinate of right manipulator */
      float r_z; /**< Z-coordinate of right manipulator */
      float r_e1; /**< 1st Euler angle of right manipulator rotation */
      float r_e2; /**< 2nd Euler angle of right manipulator rotation */
      float r_e3; /**< 3rd Euler angle of right manipulator rotation */
    } CartesianGotoMessage_data_t;
#pragma pack(pop)

    CartesianGotoMessage_data_t *data;

   public:
    CartesianGotoMessage(const float ini_l_x, const float ini_l_y, const float ini_l_z, const float ini_l_e1, const float ini_l_e2, const float ini_l_e3, const float ini_r_x, const float ini_r_y, const float ini_r_z, const float ini_r_e1, const float ini_r_e2, const float ini_r_e3);
    CartesianGotoMessage();
    ~CartesianGotoMessage();

    CartesianGotoMessage(const CartesianGotoMessage *m);
    /* Methods */
    float l_x() const;
    void set_l_x(const float new_l_x);
    size_t maxlenof_l_x() const;
    float l_y() const;
    void set_l_y(const float new_l_y);
    size_t maxlenof_l_y() const;
    float l_z() const;
    void set_l_z(const float new_l_z);
    size_t maxlenof_l_z() const;
    float l_e1() const;
    void set_l_e1(const float new_l_e1);
    size_t maxlenof_l_e1() const;
    float l_e2() const;
    void set_l_e2(const float new_l_e2);
    size_t maxlenof_l_e2() const;
    float l_e3() const;
    void set_l_e3(const float new_l_e3);
    size_t maxlenof_l_e3() const;
    float r_x() const;
    void set_r_x(const float new_r_x);
    size_t maxlenof_r_x() const;
    float r_y() const;
    void set_r_y(const float new_r_y);
    size_t maxlenof_r_y() const;
    float r_z() const;
    void set_r_z(const float new_r_z);
    size_t maxlenof_r_z() const;
    float r_e1() const;
    void set_r_e1(const float new_r_e1);
    size_t maxlenof_r_e1() const;
    float r_e2() const;
    void set_r_e2(const float new_r_e2);
    size_t maxlenof_r_e2() const;
    float r_e3() const;
    void set_r_e3(const float new_r_e3);
    size_t maxlenof_r_e3() const;
    virtual Message * clone() const;
  };

  class MoveGripperMessage : public Message
  {
   private:
#pragma pack(push,4)
    /** Internal data storage, do NOT modify! */
    typedef struct {
      int64_t timestamp_sec;  /**< Interface Unix timestamp, seconds */
      int64_t timestamp_usec; /**< Interface Unix timestamp, micro-seconds */
      float l_finger1; /**< Value of finger 1 on left gripper. Range [0,60] */
      float l_finger2; /**< Value of finger 2 on left gripper. Range [0,60] */
      float l_finger3; /**< Value of finger 3 on left gripper. Range [0,60] */
      float r_finger1; /**< Value of finger 1 on right gripper. Range [0,60] */
      float r_finger2; /**< Value of finger 2 on right gripper. Range [0,60] */
      float r_finger3; /**< Value of finger 3 on right gripper. Range [0,60] */
    } MoveGripperMessage_data_t;
#pragma pack(pop)

    MoveGripperMessage_data_t *data;

   public:
    MoveGripperMessage(const float ini_l_finger1, const float ini_l_finger2, const float ini_l_finger3, const float ini_r_finger1, const float ini_r_finger2, const float ini_r_finger3);
    MoveGripperMessage();
    ~MoveGripperMessage();

    MoveGripperMessage(const MoveGripperMessage *m);
    /* Methods */
    float l_finger1() const;
    void set_l_finger1(const float new_l_finger1);
    size_t maxlenof_l_finger1() const;
    float l_finger2() const;
    void set_l_finger2(const float new_l_finger2);
    size_t maxlenof_l_finger2() const;
    float l_finger3() const;
    void set_l_finger3(const float new_l_finger3);
    size_t maxlenof_l_finger3() const;
    float r_finger1() const;
    void set_r_finger1(const float new_r_finger1);
    size_t maxlenof_r_finger1() const;
    float r_finger2() const;
    void set_r_finger2(const float new_r_finger2);
    size_t maxlenof_r_finger2() const;
    float r_finger3() const;
    void set_r_finger3(const float new_r_finger3);
    size_t maxlenof_r_finger3() const;
    virtual Message * clone() const;
  };

  class SetPlannerParamsMessage : public Message
  {
   private:
#pragma pack(push,4)
    /** Internal data storage, do NOT modify! */
    typedef struct {
      int64_t timestamp_sec;  /**< Interface Unix timestamp, seconds */
      int64_t timestamp_usec; /**< Interface Unix timestamp, micro-seconds */
      char params[1024]; /**< Planner parameters */
    } SetPlannerParamsMessage_data_t;
#pragma pack(pop)

    SetPlannerParamsMessage_data_t *data;

   public:
    SetPlannerParamsMessage(const char * ini_params);
    SetPlannerParamsMessage();
    ~SetPlannerParamsMessage();

    SetPlannerParamsMessage(const SetPlannerParamsMessage *m);
    /* Methods */
    char * params() const;
    void set_params(const char * new_params);
    size_t maxlenof_params() const;
    virtual Message * clone() const;
  };

  class SetConstrainedMessage : public Message
  {
   private:
#pragma pack(push,4)
    /** Internal data storage, do NOT modify! */
    typedef struct {
      int64_t timestamp_sec;  /**< Interface Unix timestamp, seconds */
      int64_t timestamp_usec; /**< Interface Unix timestamp, micro-seconds */
      bool constrained; /**< Wheter planning is using constraint-function.
      This is an OpenRAVE internal constraint function. */
    } SetConstrainedMessage_data_t;
#pragma pack(pop)

    SetConstrainedMessage_data_t *data;

   public:
    SetConstrainedMessage(const bool ini_constrained);
    SetConstrainedMessage();
    ~SetConstrainedMessage();

    SetConstrainedMessage(const SetConstrainedMessage *m);
    /* Methods */
    bool is_constrained() const;
    void set_constrained(const bool new_constrained);
    size_t maxlenof_constrained() const;
    virtual Message * clone() const;
  };

  virtual bool message_valid(const Message *message) const;
 private:
  JacoBimanualInterface();
  ~JacoBimanualInterface();

 public:
  /* Methods */
  uint32_t msgid() const;
  void set_msgid(const uint32_t new_msgid);
  size_t maxlenof_msgid() const;
  bool is_final() const;
  void set_final(const bool new_final);
  size_t maxlenof_final() const;
  uint32_t error_code() const;
  void set_error_code(const uint32_t new_error_code);
  size_t maxlenof_error_code() const;
  bool is_constrained() const;
  void set_constrained(const bool new_constrained);
  size_t maxlenof_constrained() const;
  virtual Message * create_message(const char *type) const;

  virtual void copy_values(const Interface *other);
  virtual const char * enum_tostring(const char *enumtype, int val) const;

};

} // end namespace fawkes

#endif
