
/***************************************************************************
 *  OpenCVStereoParamsInterface.h - Fawkes BlackBoard Interface - OpenCVStereoParamsInterface
 *
 *  Templated created:   Thu Oct 12 10:49:19 2006
 *  Copyright  2013  Tim Niemueller
 *
 ****************************************************************************/

/*  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2 of the License, or
 *  (at your option) any later version. A runtime exception applies to
 *  this software (see LICENSE.GPL_WRE file mentioned below for details).
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Library General Public License for more details.
 *
 *  Read the full text in the LICENSE.GPL_WRE file in the doc directory.
 */

#ifndef __INTERFACES_OPENCVSTEREOPARAMSINTERFACE_H_
#define __INTERFACES_OPENCVSTEREOPARAMSINTERFACE_H_

#include <interface/interface.h>
#include <interface/message.h>
#include <interface/field_iterator.h>

namespace fawkes {

class OpenCVStereoParamsInterface : public Interface
{
 /// @cond INTERNALS
 INTERFACE_MGMT_FRIENDS(OpenCVStereoParamsInterface)
 /// @endcond
 public:
  /* constants */

  /** 
        The type used for the pre-filter to come up with the features
	for the correspondence matching.
       */
  typedef enum {
    PFT_NORMALIZED_RESPONSE /**< Normalized response filter. */,
    PFT_XSOBEL /**< Sobel filters. */
  } PreFilterType;
  const char * tostring_PreFilterType(PreFilterType value) const;

 private:
#pragma pack(push,4)
  /** Internal data storage, do NOT modify! */
  typedef struct {
    int64_t timestamp_sec;  /**< Interface Unix timestamp, seconds */
    int64_t timestamp_usec; /**< Interface Unix timestamp, micro-seconds */
    int32_t pre_filter_type; /**< Pre-filtering method. */
    uint32_t pre_filter_size; /**< 
      Averaging window size: ~5x5..21x21.
     */
    uint32_t pre_filter_cap; /**< 
      The output of pre-filtering is clipped by [-pre_filter_cap,pre_filter_cap].
     */
    uint32_t sad_window_size; /**< 
      Correspondence using Sum of Absolute Difference (SAD) window size (5x5..21x21).
     */
    int32_t min_disparity; /**< Minimum disparity (can be negative). */
    uint32_t num_disparities; /**< 
      Number of disparities (maximum disparity - minimum disparity (> 0)).
     */
    uint32_t texture_threshold; /**< 
      The disparity is only computed for pixels with textured enough
      neighborhood.
     */
    uint32_t uniqueness_ratio; /**< 
      Accept the computed disparity d* only if
      SAD(d) >= SAD(d*)*(1 + uniquenessRatio/100.)
      for any d != d*+/-1 within the search range.
     */
    uint32_t speckle_window_size; /**< 
      Disparity variation window size.
     */
    uint32_t speckle_range; /**< 
      Acceptable range of variation in window.
     */
    bool try_smaller_windows; /**< 
      If enabled, the results may be more accurate, at the expense of
      slower processing.
     */
  } OpenCVStereoParamsInterface_data_t;
#pragma pack(pop)

  OpenCVStereoParamsInterface_data_t *data;

  interface_enum_map_t enum_map_PreFilterType;
 public:
  /* messages */
  class SetPreFilterTypeMessage : public Message
  {
   private:
#pragma pack(push,4)
    /** Internal data storage, do NOT modify! */
    typedef struct {
      int64_t timestamp_sec;  /**< Interface Unix timestamp, seconds */
      int64_t timestamp_usec; /**< Interface Unix timestamp, micro-seconds */
      int32_t pre_filter_type; /**< Pre-filtering method. */
    } SetPreFilterTypeMessage_data_t;
#pragma pack(pop)

    SetPreFilterTypeMessage_data_t *data;

  interface_enum_map_t enum_map_PreFilterType;
   public:
    SetPreFilterTypeMessage(const PreFilterType ini_pre_filter_type);
    SetPreFilterTypeMessage();
    ~SetPreFilterTypeMessage();

    SetPreFilterTypeMessage(const SetPreFilterTypeMessage *m);
    /* Methods */
    PreFilterType pre_filter_type() const;
    void set_pre_filter_type(const PreFilterType new_pre_filter_type);
    size_t maxlenof_pre_filter_type() const;
    virtual Message * clone() const;
  };

  class SetPreFilterSizeMessage : public Message
  {
   private:
#pragma pack(push,4)
    /** Internal data storage, do NOT modify! */
    typedef struct {
      int64_t timestamp_sec;  /**< Interface Unix timestamp, seconds */
      int64_t timestamp_usec; /**< Interface Unix timestamp, micro-seconds */
      uint32_t pre_filter_size; /**< 
      Averaging window size: ~5x5..21x21.
     */
    } SetPreFilterSizeMessage_data_t;
#pragma pack(pop)

    SetPreFilterSizeMessage_data_t *data;

  interface_enum_map_t enum_map_PreFilterType;
   public:
    SetPreFilterSizeMessage(const uint32_t ini_pre_filter_size);
    SetPreFilterSizeMessage();
    ~SetPreFilterSizeMessage();

    SetPreFilterSizeMessage(const SetPreFilterSizeMessage *m);
    /* Methods */
    uint32_t pre_filter_size() const;
    void set_pre_filter_size(const uint32_t new_pre_filter_size);
    size_t maxlenof_pre_filter_size() const;
    virtual Message * clone() const;
  };

  class SetPreFilterCapMessage : public Message
  {
   private:
#pragma pack(push,4)
    /** Internal data storage, do NOT modify! */
    typedef struct {
      int64_t timestamp_sec;  /**< Interface Unix timestamp, seconds */
      int64_t timestamp_usec; /**< Interface Unix timestamp, micro-seconds */
      uint32_t pre_filter_cap; /**< 
      The output of pre-filtering is clipped by [-pre_filter_cap,pre_filter_cap].
     */
    } SetPreFilterCapMessage_data_t;
#pragma pack(pop)

    SetPreFilterCapMessage_data_t *data;

  interface_enum_map_t enum_map_PreFilterType;
   public:
    SetPreFilterCapMessage(const uint32_t ini_pre_filter_cap);
    SetPreFilterCapMessage();
    ~SetPreFilterCapMessage();

    SetPreFilterCapMessage(const SetPreFilterCapMessage *m);
    /* Methods */
    uint32_t pre_filter_cap() const;
    void set_pre_filter_cap(const uint32_t new_pre_filter_cap);
    size_t maxlenof_pre_filter_cap() const;
    virtual Message * clone() const;
  };

  class SetSADWindowSizeMessage : public Message
  {
   private:
#pragma pack(push,4)
    /** Internal data storage, do NOT modify! */
    typedef struct {
      int64_t timestamp_sec;  /**< Interface Unix timestamp, seconds */
      int64_t timestamp_usec; /**< Interface Unix timestamp, micro-seconds */
      uint32_t sad_window_size; /**< 
      Correspondence using Sum of Absolute Difference (SAD) window size (5x5..21x21).
     */
    } SetSADWindowSizeMessage_data_t;
#pragma pack(pop)

    SetSADWindowSizeMessage_data_t *data;

  interface_enum_map_t enum_map_PreFilterType;
   public:
    SetSADWindowSizeMessage(const uint32_t ini_sad_window_size);
    SetSADWindowSizeMessage();
    ~SetSADWindowSizeMessage();

    SetSADWindowSizeMessage(const SetSADWindowSizeMessage *m);
    /* Methods */
    uint32_t sad_window_size() const;
    void set_sad_window_size(const uint32_t new_sad_window_size);
    size_t maxlenof_sad_window_size() const;
    virtual Message * clone() const;
  };

  class SetMinDisparityMessage : public Message
  {
   private:
#pragma pack(push,4)
    /** Internal data storage, do NOT modify! */
    typedef struct {
      int64_t timestamp_sec;  /**< Interface Unix timestamp, seconds */
      int64_t timestamp_usec; /**< Interface Unix timestamp, micro-seconds */
      int32_t min_disparity; /**< Minimum disparity (can be negative). */
    } SetMinDisparityMessage_data_t;
#pragma pack(pop)

    SetMinDisparityMessage_data_t *data;

  interface_enum_map_t enum_map_PreFilterType;
   public:
    SetMinDisparityMessage(const int32_t ini_min_disparity);
    SetMinDisparityMessage();
    ~SetMinDisparityMessage();

    SetMinDisparityMessage(const SetMinDisparityMessage *m);
    /* Methods */
    int32_t min_disparity() const;
    void set_min_disparity(const int32_t new_min_disparity);
    size_t maxlenof_min_disparity() const;
    virtual Message * clone() const;
  };

  class SetNumDisparitiesMessage : public Message
  {
   private:
#pragma pack(push,4)
    /** Internal data storage, do NOT modify! */
    typedef struct {
      int64_t timestamp_sec;  /**< Interface Unix timestamp, seconds */
      int64_t timestamp_usec; /**< Interface Unix timestamp, micro-seconds */
      uint32_t num_disparities; /**< 
      Number of disparities (maximum disparity - minimum disparity (> 0)).
     */
    } SetNumDisparitiesMessage_data_t;
#pragma pack(pop)

    SetNumDisparitiesMessage_data_t *data;

  interface_enum_map_t enum_map_PreFilterType;
   public:
    SetNumDisparitiesMessage(const uint32_t ini_num_disparities);
    SetNumDisparitiesMessage();
    ~SetNumDisparitiesMessage();

    SetNumDisparitiesMessage(const SetNumDisparitiesMessage *m);
    /* Methods */
    uint32_t num_disparities() const;
    void set_num_disparities(const uint32_t new_num_disparities);
    size_t maxlenof_num_disparities() const;
    virtual Message * clone() const;
  };

  class SetTextureThresholdMessage : public Message
  {
   private:
#pragma pack(push,4)
    /** Internal data storage, do NOT modify! */
    typedef struct {
      int64_t timestamp_sec;  /**< Interface Unix timestamp, seconds */
      int64_t timestamp_usec; /**< Interface Unix timestamp, micro-seconds */
      uint32_t texture_threshold; /**< 
      The disparity is only computed for pixels with textured enough
      neighborhood.
     */
    } SetTextureThresholdMessage_data_t;
#pragma pack(pop)

    SetTextureThresholdMessage_data_t *data;

  interface_enum_map_t enum_map_PreFilterType;
   public:
    SetTextureThresholdMessage(const uint32_t ini_texture_threshold);
    SetTextureThresholdMessage();
    ~SetTextureThresholdMessage();

    SetTextureThresholdMessage(const SetTextureThresholdMessage *m);
    /* Methods */
    uint32_t texture_threshold() const;
    void set_texture_threshold(const uint32_t new_texture_threshold);
    size_t maxlenof_texture_threshold() const;
    virtual Message * clone() const;
  };

  class SetUniquenessRatioMessage : public Message
  {
   private:
#pragma pack(push,4)
    /** Internal data storage, do NOT modify! */
    typedef struct {
      int64_t timestamp_sec;  /**< Interface Unix timestamp, seconds */
      int64_t timestamp_usec; /**< Interface Unix timestamp, micro-seconds */
      uint32_t uniqueness_ratio; /**< 
      Accept the computed disparity d* only if
      SAD(d) >= SAD(d*)*(1 + uniquenessRatio/100.)
      for any d != d*+/-1 within the search range.
     */
    } SetUniquenessRatioMessage_data_t;
#pragma pack(pop)

    SetUniquenessRatioMessage_data_t *data;

  interface_enum_map_t enum_map_PreFilterType;
   public:
    SetUniquenessRatioMessage(const uint32_t ini_uniqueness_ratio);
    SetUniquenessRatioMessage();
    ~SetUniquenessRatioMessage();

    SetUniquenessRatioMessage(const SetUniquenessRatioMessage *m);
    /* Methods */
    uint32_t uniqueness_ratio() const;
    void set_uniqueness_ratio(const uint32_t new_uniqueness_ratio);
    size_t maxlenof_uniqueness_ratio() const;
    virtual Message * clone() const;
  };

  class SetSpeckleWindowSizeMessage : public Message
  {
   private:
#pragma pack(push,4)
    /** Internal data storage, do NOT modify! */
    typedef struct {
      int64_t timestamp_sec;  /**< Interface Unix timestamp, seconds */
      int64_t timestamp_usec; /**< Interface Unix timestamp, micro-seconds */
      uint32_t speckle_window_size; /**< 
      Disparity variation window size.
     */
    } SetSpeckleWindowSizeMessage_data_t;
#pragma pack(pop)

    SetSpeckleWindowSizeMessage_data_t *data;

  interface_enum_map_t enum_map_PreFilterType;
   public:
    SetSpeckleWindowSizeMessage(const uint32_t ini_speckle_window_size);
    SetSpeckleWindowSizeMessage();
    ~SetSpeckleWindowSizeMessage();

    SetSpeckleWindowSizeMessage(const SetSpeckleWindowSizeMessage *m);
    /* Methods */
    uint32_t speckle_window_size() const;
    void set_speckle_window_size(const uint32_t new_speckle_window_size);
    size_t maxlenof_speckle_window_size() const;
    virtual Message * clone() const;
  };

  class SetSpeckleRangeMessage : public Message
  {
   private:
#pragma pack(push,4)
    /** Internal data storage, do NOT modify! */
    typedef struct {
      int64_t timestamp_sec;  /**< Interface Unix timestamp, seconds */
      int64_t timestamp_usec; /**< Interface Unix timestamp, micro-seconds */
      uint32_t speckle_range; /**< 
      Acceptable range of variation in window.
     */
    } SetSpeckleRangeMessage_data_t;
#pragma pack(pop)

    SetSpeckleRangeMessage_data_t *data;

  interface_enum_map_t enum_map_PreFilterType;
   public:
    SetSpeckleRangeMessage(const uint32_t ini_speckle_range);
    SetSpeckleRangeMessage();
    ~SetSpeckleRangeMessage();

    SetSpeckleRangeMessage(const SetSpeckleRangeMessage *m);
    /* Methods */
    uint32_t speckle_range() const;
    void set_speckle_range(const uint32_t new_speckle_range);
    size_t maxlenof_speckle_range() const;
    virtual Message * clone() const;
  };

  class SetTrySmallerWindowsMessage : public Message
  {
   private:
#pragma pack(push,4)
    /** Internal data storage, do NOT modify! */
    typedef struct {
      int64_t timestamp_sec;  /**< Interface Unix timestamp, seconds */
      int64_t timestamp_usec; /**< Interface Unix timestamp, micro-seconds */
      bool try_smaller_windows; /**< 
      If enabled, the results may be more accurate, at the expense of
      slower processing.
     */
    } SetTrySmallerWindowsMessage_data_t;
#pragma pack(pop)

    SetTrySmallerWindowsMessage_data_t *data;

  interface_enum_map_t enum_map_PreFilterType;
   public:
    SetTrySmallerWindowsMessage(const bool ini_try_smaller_windows);
    SetTrySmallerWindowsMessage();
    ~SetTrySmallerWindowsMessage();

    SetTrySmallerWindowsMessage(const SetTrySmallerWindowsMessage *m);
    /* Methods */
    bool is_try_smaller_windows() const;
    void set_try_smaller_windows(const bool new_try_smaller_windows);
    size_t maxlenof_try_smaller_windows() const;
    virtual Message * clone() const;
  };

  virtual bool message_valid(const Message *message) const;
 private:
  OpenCVStereoParamsInterface();
  ~OpenCVStereoParamsInterface();

 public:
  /* Methods */
  PreFilterType pre_filter_type() const;
  void set_pre_filter_type(const PreFilterType new_pre_filter_type);
  size_t maxlenof_pre_filter_type() const;
  uint32_t pre_filter_size() const;
  void set_pre_filter_size(const uint32_t new_pre_filter_size);
  size_t maxlenof_pre_filter_size() const;
  uint32_t pre_filter_cap() const;
  void set_pre_filter_cap(const uint32_t new_pre_filter_cap);
  size_t maxlenof_pre_filter_cap() const;
  uint32_t sad_window_size() const;
  void set_sad_window_size(const uint32_t new_sad_window_size);
  size_t maxlenof_sad_window_size() const;
  int32_t min_disparity() const;
  void set_min_disparity(const int32_t new_min_disparity);
  size_t maxlenof_min_disparity() const;
  uint32_t num_disparities() const;
  void set_num_disparities(const uint32_t new_num_disparities);
  size_t maxlenof_num_disparities() const;
  uint32_t texture_threshold() const;
  void set_texture_threshold(const uint32_t new_texture_threshold);
  size_t maxlenof_texture_threshold() const;
  uint32_t uniqueness_ratio() const;
  void set_uniqueness_ratio(const uint32_t new_uniqueness_ratio);
  size_t maxlenof_uniqueness_ratio() const;
  uint32_t speckle_window_size() const;
  void set_speckle_window_size(const uint32_t new_speckle_window_size);
  size_t maxlenof_speckle_window_size() const;
  uint32_t speckle_range() const;
  void set_speckle_range(const uint32_t new_speckle_range);
  size_t maxlenof_speckle_range() const;
  bool is_try_smaller_windows() const;
  void set_try_smaller_windows(const bool new_try_smaller_windows);
  size_t maxlenof_try_smaller_windows() const;
  virtual Message * create_message(const char *type) const;

  virtual void copy_values(const Interface *other);
  virtual const char * enum_tostring(const char *enumtype, int val) const;

};

} // end namespace fawkes

#endif
