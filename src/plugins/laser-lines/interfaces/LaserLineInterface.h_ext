
/***************************************************************************
 *  LaserLineInterface.h - Fawkes BlackBoard Interface - LaserLineInterface
 *
 *  Templated created:   Thu Oct 12 10:49:19 2006
 *  Copyright  2013  Tim Niemueller
 *
 ****************************************************************************/

/*  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2 of the License, or
 *  (at your option) any later version. A runtime exception applies to
 *  this software (see LICENSE.GPL_WRE file mentioned below for details).
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Library General Public License for more details.
 *
 *  Read the full text in the LICENSE.GPL_WRE file in the doc directory.
 */

#ifndef __INTERFACES_LASERLINEINTERFACE_H_
#define __INTERFACES_LASERLINEINTERFACE_H_

#include <interface/interface.h>
#include <interface/message.h>
#include <interface/field_iterator.h>

namespace fawkes {

class LaserLineInterface : public Interface
{
 /// @cond INTERNALS
 INTERFACE_MGMT_FRIENDS(LaserLineInterface)
 /// @endcond
 public:
  /* constants */

 private:
#pragma pack(push,4)
  /** Internal data storage, do NOT modify! */
  typedef struct {
    int64_t timestamp_sec;  /**< Interface Unix timestamp, seconds */
    int64_t timestamp_usec; /**< Interface Unix timestamp, micro-seconds */
    char frame_id[32]; /**< 
      Coordinate frame ID of data.
     */
    int32_t visibility_history; /**< 
      The visibilitiy history indicates the number of consecutive positive or negative
      sightings. If the history is negative, there have been as many negative sightings
      (object not visible) as the absolute value of the history. A positive value denotes
      as many positive sightings. 0 shall only be used during the initialization of the
      interface or if the visibility history is not updated.
     */
    float point_on_line[3]; /**< 
      Vector to some point on the line
     */
    float line_direction[3]; /**< 
      Vector in the direction of the line.
     */
    float bearing; /**< 
      Direction towards the line, i.e. if the robot turns by this
      angle the robot will stand parallel to the line.
     */
    float end_point_1[3]; /**< 
      3D coordinates in the reference frame of one endpoint of the
      line. The end points are ordered arbitrarily.
     */
    float end_point_2[3]; /**< 
      3D coordinates in the reference frame of the second endpoint of
      the line.
     */
    float length; /**< Length of the line. */
  } LaserLineInterface_data_t;
#pragma pack(pop)

  LaserLineInterface_data_t *data;

 public:
  /* messages */
  virtual bool message_valid(const Message *message) const;
 private:
  LaserLineInterface();
  ~LaserLineInterface();

 public:
  /* Methods */
  char * frame_id() const;
  void set_frame_id(const char * new_frame_id);
  size_t maxlenof_frame_id() const;
  int32_t visibility_history() const;
  void set_visibility_history(const int32_t new_visibility_history);
  size_t maxlenof_visibility_history() const;
  float * point_on_line() const;
  float point_on_line(unsigned int index) const;
  void set_point_on_line(unsigned int index, const float new_point_on_line);
  void set_point_on_line(const float * new_point_on_line);
  size_t maxlenof_point_on_line() const;
  float * line_direction() const;
  float line_direction(unsigned int index) const;
  void set_line_direction(unsigned int index, const float new_line_direction);
  void set_line_direction(const float * new_line_direction);
  size_t maxlenof_line_direction() const;
  float bearing() const;
  void set_bearing(const float new_bearing);
  size_t maxlenof_bearing() const;
  float * end_point_1() const;
  float end_point_1(unsigned int index) const;
  void set_end_point_1(unsigned int index, const float new_end_point_1);
  void set_end_point_1(const float * new_end_point_1);
  size_t maxlenof_end_point_1() const;
  float * end_point_2() const;
  float end_point_2(unsigned int index) const;
  void set_end_point_2(unsigned int index, const float new_end_point_2);
  void set_end_point_2(const float * new_end_point_2);
  size_t maxlenof_end_point_2() const;
  float length() const;
  void set_length(const float new_length);
  size_t maxlenof_length() const;
  virtual Message * create_message(const char *type) const;

  virtual void copy_values(const Interface *other);
  virtual const char * enum_tostring(const char *enumtype, int val) const;

};

} // end namespace fawkes

#endif
